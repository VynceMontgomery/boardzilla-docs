{"searchDocs":[{"title":"FlowInterruptAndRepeat","type":0,"sectionRef":"#","url":"/api/class/FlowInterruptAndRepeat","content":"FlowInterruptAndRepeat Hierarchy Error FlowInterruptAndRepeat Index Constructors constructor Constructors externalconstructor new FlowInterruptAndRepeat(message?: string): FlowInterruptAndRepeat Inherited from Error.constructor Parameters externaloptionalmessage: string Returns FlowInterruptAndRepeat","keywords":"","version":"Next"},{"title":"FlowInterruptAndSkip","type":0,"sectionRef":"#","url":"/api/class/FlowInterruptAndSkip","content":"FlowInterruptAndSkip Hierarchy Error FlowInterruptAndSkip Index Constructors constructor Constructors externalconstructor new FlowInterruptAndSkip(message?: string): FlowInterruptAndSkip Inherited from Error.constructor Parameters externaloptionalmessage: string Returns FlowInterruptAndSkip","keywords":"","version":"Next"},{"title":"Flow <P>","type":0,"sectionRef":"#","url":"/api/class/Flow","content":"Flow &lt;P&gt; Hierarchy Flow ActionStepForLoopSwitchCaseWhileLoop Index Constructors constructor Properties blockgamenameparentpositionsequencesteptoptype Methods actionNeededadvanceallStepsbranchJSONcurrentBlockcurrentFlowcurrentLoopflowStepArgsfromJSONgetStepplayplayOneStepprocessMoveresetsetBranchFromJSONsetPositionsetPositionFromJSONtoJSONtoStringvalidateNoDuplicate Constructors constructor new Flow&lt;P&gt;(__namedParameters: { do?: FlowDefinition&lt;P&gt;; name?: string }): default&lt;P&gt; Type parameters P: default Parameters __namedParameters: { do?: FlowDefinition&lt;P&gt;; name?: string } Returns default&lt;P&gt; Properties optionalblock block?: FlowDefinition&lt;P&gt; game game: default&lt;P, default&lt;P&gt;&gt; optionalname name?: string optionalparent parent?: default&lt;P&gt; optionalposition position?: Position&lt;P&gt; optionalsequence sequence?: number optionalstep step?: FlowStep&lt;P&gt; top top: default&lt;P&gt; type type: sequence | loop | foreach | switch-case | action = 'sequence' Methods actionNeeded actionNeeded(): undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Returns undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } advance advance(): ok | complete Returns ok | complete allSteps allSteps(): FlowDefinition&lt;P&gt; Returns FlowDefinition&lt;P&gt; branchJSON branchJSON(forPlayer?: boolean): FlowBranchJSON[] Parameters forPlayer: boolean = true Returns FlowBranchJSON[] currentBlock currentBlock(): undefined | FlowDefinition&lt;P&gt; Returns undefined | FlowDefinition&lt;P&gt; currentFlow currentFlow(): default&lt;P&gt; Returns default&lt;P&gt; currentLoop currentLoop(): undefined | (default&lt;P&gt; &amp; { repeat: Function }) Returns undefined | (default&lt;P&gt; &amp; { repeat: Function }) flowStepArgs flowStepArgs(): Record&lt;string, any&gt; Returns Record&lt;string, any&gt; fromJSON fromJSON(json: any): undefined | Position&lt;P&gt; Parameters json: any Returns undefined | Position&lt;P&gt; getStep getStep(name: string): undefined | default&lt;P&gt; Parameters name: string Returns undefined | default&lt;P&gt; play play(): void | string[] Returns void | string[] playOneStep playOneStep(): string[] | ok | complete advance flow one step and return ‘complete’ if complete, ‘ok’ if can continue, ‘skip’/‘repeat’ to skip/repeat the current loop. return a list of actions if now waiting for player input. override for self-contained flows that do not have subflows. Returns string[] | ok | complete processMove processMove(move: ActionStepPosition&lt;P&gt;): undefined | string Parameters move: ActionStepPosition&lt;P&gt; Returns undefined | string reset reset(): void Returns void setBranchFromJSON setBranchFromJSON(branch: FlowBranchJSON[]): void Parameters branch: FlowBranchJSON[] Returns void setPosition setPosition(position: any, sequence?: number, reset?: boolean): void Parameters position: any optionalsequence: number reset: boolean = true Returns void setPositionFromJSON setPositionFromJSON(positionJSON: any, sequence?: number): void Parameters positionJSON: any optionalsequence: number Returns void toJSON toJSON(forPlayer?: boolean): any Parameters forPlayer: boolean = true Returns any toString toString(): string Returns string validateNoDuplicate validateNoDuplicate(): void Returns void","keywords":"","version":"Next"},{"title":"ActionStep <P>","type":0,"sectionRef":"#","url":"/api/class/ActionStep","content":"ActionStep &lt;P&gt; Hierarchy default&lt;P&gt; ActionStep Index Constructors constructor Properties actionsblockexpandgamenameparentplayerpositionpromptsequenceskipIfOnlyOnesteptoptype Methods actionNeededadvanceallStepsawaitingActionbranchJSONcurrentBlockcurrentFlowcurrentLoopflowStepArgsfromJSONgetStepplayplayOneStepprocessMoveresetsetBranchFromJSONsetPositionsetPositionFromJSONtoJSONtoStringvalidateNoDuplicate Constructors constructor new ActionStep&lt;P&gt;(__namedParameters: { actions: Record&lt;string, FlowDefinition&lt;P&gt;&gt;; expand?: boolean; name?: string; player?: (args: Record&lt;string, any&gt;) =&gt; P; prompt?: string; skipIfOnlyOne?: boolean }): default&lt;P&gt; Overrides default.constructor Type parameters P: default Parameters __namedParameters: { actions: Record&lt;string, FlowDefinition&lt;P&gt;&gt;; expand?: boolean; name?: string; player?: (args: Record&lt;string, any&gt;) =&gt; P; prompt?: string; skipIfOnlyOne?: boolean } Returns default&lt;P&gt; Properties actions actions: Record&lt;string, FlowDefinition&lt;P&gt;&gt; optionalblock block?: FlowDefinition&lt;P&gt; Inherited from default.block expand expand: boolean game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game optionalname name?: string Inherited from default.name optionalparent parent?: default&lt;P&gt; Inherited from default.parent optionalplayer player?: (args: Record&lt;string, any&gt;) =&gt; P Type declaration (args: Record&lt;string, any&gt;): P Parameters args: Record&lt;string, any&gt; Returns P position position: ActionStepPosition&lt;P&gt; Overrides default.position optionalprompt prompt?: string optionalsequence sequence?: number Inherited from default.sequence skipIfOnlyOne skipIfOnlyOne: boolean optionalstep step?: FlowStep&lt;P&gt; Inherited from default.step top top: default&lt;P&gt; Inherited from default.top type type: sequence | loop | foreach | switch-case | action = &quot;action&quot; Overrides default.type Methods actionNeeded actionNeeded(): undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Inherited from default.actionNeeded Returns undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } advance advance(): ok | complete Inherited from default.advance Returns ok | complete allSteps allSteps(): FlowStep&lt;P&gt;[] Overrides default.allSteps Returns FlowStep&lt;P&gt;[] awaitingAction awaitingAction(): undefined | string[] Returns undefined | string[] branchJSON branchJSON(forPlayer?: boolean): FlowBranchJSON[] Inherited from default.branchJSON Parameters forPlayer: boolean = true Returns FlowBranchJSON[] currentBlock currentBlock(): undefined | (args: Record&lt;string, any&gt;) =&gt; void | default&lt;P&gt; | FlowStep&lt;P&gt;[] Overrides default.currentBlock Returns undefined | (args: Record&lt;string, any&gt;) =&gt; void | default&lt;P&gt; | FlowStep&lt;P&gt;[] currentFlow currentFlow(): default&lt;P&gt; Inherited from default.currentFlow Returns default&lt;P&gt; currentLoop currentLoop(): undefined | (default&lt;P&gt; &amp; { repeat: Function }) Inherited from default.currentLoop Returns undefined | (default&lt;P&gt; &amp; { repeat: Function }) flowStepArgs flowStepArgs(): Record&lt;string, any&gt; Inherited from default.flowStepArgs Returns Record&lt;string, any&gt; fromJSON fromJSON(position: any): { action: any; args: any; player: any } Overrides default.fromJSON Parameters position: any Returns { action: any; args: any; player: any } action: any args: any player: any getStep getStep(name: string): undefined | default&lt;P&gt; Inherited from default.getStep Parameters name: string Returns undefined | default&lt;P&gt; play play(): void | string[] Inherited from default.play Returns void | string[] playOneStep playOneStep(): string[] | ok | complete Inherited from default.playOneStep advance flow one step and return ‘complete’ if complete, ‘ok’ if can continue, ‘skip’/‘repeat’ to skip/repeat the current loop. return a list of actions if now waiting for player input. override for self-contained flows that do not have subflows. Returns string[] | ok | complete processMove processMove(move: Required&lt;ActionStepPosition&lt;P&gt;&gt;): undefined | string Overrides default.processMove Parameters move: Required&lt;ActionStepPosition&lt;P&gt;&gt; Returns undefined | string reset reset(): void Overrides default.reset Returns void setBranchFromJSON setBranchFromJSON(branch: FlowBranchJSON[]): void Inherited from default.setBranchFromJSON Parameters branch: FlowBranchJSON[] Returns void setPosition setPosition(position: any, sequence?: number, reset?: boolean): void Inherited from default.setPosition Parameters position: any optionalsequence: number reset: boolean = true Returns void setPositionFromJSON setPositionFromJSON(positionJSON: any, sequence?: number): void Inherited from default.setPositionFromJSON Parameters positionJSON: any optionalsequence: number Returns void toJSON toJSON(forPlayer?: boolean): { action?: undefined; args?: undefined; player?: undefined } | { action: string; args: undefined | SerializedArg[]; player: undefined | number } Overrides default.toJSON Parameters forPlayer: boolean = true Returns { action?: undefined; args?: undefined; player?: undefined } | { action: string; args: undefined | SerializedArg[]; player: undefined | number } toString toString(): string Overrides default.toString Returns string validateNoDuplicate validateNoDuplicate(): void Inherited from default.validateNoDuplicate Returns void","keywords":"","version":"Next"},{"title":"ForEach <P, T>","type":0,"sectionRef":"#","url":"/api/class/ForEach","content":"ForEach &lt;P, T&gt; Hierarchy default&lt;P, T&gt; ForEach Index Constructors constructor Properties blockcollectiongameinitialnamenextparentpositionsequencesteptoptypewhile Methods actionNeededadvanceallStepsbranchJSONcurrentBlockcurrentFlowcurrentLoopflowStepArgsfromJSONgetStepplayplayOneStepprocessMoverepeatresetsetBranchFromJSONsetPositionsetPositionFromJSONtoJSONtoStringvalidateNoDuplicate Constructors constructor new ForEach&lt;P, T&gt;(__namedParameters: { collection: (a: Record&lt;string, any&gt;) =&gt; T[] | T[]; do: FlowDefinition&lt;P&gt;; name: string }): default&lt;P, T&gt; Overrides default.constructor Type parameters P: defaultT: undefined | null | string | number | boolean | default | default&lt;P&gt; | Serializable&lt;P&gt;[] | {} Parameters __namedParameters: { collection: (a: Record&lt;string, any&gt;) =&gt; T[] | T[]; do: FlowDefinition&lt;P&gt;; name: string } Returns default&lt;P, T&gt; Properties block block: FlowDefinition&lt;P&gt; Inherited from default.block collection collection: T[] | (a?: Record&lt;string, any&gt;) =&gt; T[] game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game initial initial: T | (a?: Record&lt;string, any&gt;) =&gt; T Inherited from default.initial optionalname name?: string Inherited from default.name next next: (a: T) =&gt; T Inherited from default.next Type declaration (a: T): T Parameters a: T Returns T optionalparent parent?: default&lt;P&gt; Inherited from default.parent position position: ForEachPosition&lt;T&gt; Overrides default.position optionalsequence sequence?: number Inherited from default.sequence optionalstep step?: FlowStep&lt;P&gt; Inherited from default.step top top: default&lt;P&gt; Inherited from default.top type type: sequence | loop | foreach | switch-case | action = 'foreach' Overrides default.type while while: (a: T) =&gt; boolean Inherited from default.while Type declaration (a: T): boolean Parameters a: T Returns boolean Methods actionNeeded actionNeeded(): undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Inherited from default.actionNeeded Returns undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } advance advance(): ok | complete Inherited from default.advance Returns ok | complete allSteps allSteps(): FlowDefinition&lt;P&gt; Inherited from default.allSteps Returns FlowDefinition&lt;P&gt; branchJSON branchJSON(forPlayer?: boolean): FlowBranchJSON[] Inherited from default.branchJSON Parameters forPlayer: boolean = true Returns FlowBranchJSON[] currentBlock currentBlock(): undefined | FlowDefinition&lt;P&gt; Inherited from default.currentBlock Returns undefined | FlowDefinition&lt;P&gt; currentFlow currentFlow(): default&lt;P&gt; Inherited from default.currentFlow Returns default&lt;P&gt; currentLoop currentLoop(): undefined | (default&lt;P&gt; &amp; { repeat: Function }) Inherited from default.currentLoop Returns undefined | (default&lt;P&gt; &amp; { repeat: Function }) flowStepArgs flowStepArgs(): Record&lt;string, any&gt; Inherited from default.flowStepArgs Returns Record&lt;string, any&gt; fromJSON fromJSON(position: any): { collection: Serializable&lt;P&gt;; index: any; value: Serializable&lt;P&gt; } Overrides default.fromJSON Parameters position: any Returns { collection: Serializable&lt;P&gt;; index: any; value: Serializable&lt;P&gt; } collection: Serializable&lt;P&gt; index: any value: Serializable&lt;P&gt; getStep getStep(name: string): undefined | default&lt;P&gt; Inherited from default.getStep Parameters name: string Returns undefined | default&lt;P&gt; play play(): void | string[] Inherited from default.play Returns void | string[] playOneStep playOneStep(): string[] | ok | complete Inherited from default.playOneStep advance flow one step and return ‘complete’ if complete, ‘ok’ if can continue, ‘skip’/‘repeat’ to skip/repeat the current loop. return a list of actions if now waiting for player input. override for self-contained flows that do not have subflows. Returns string[] | ok | complete processMove processMove(move: ActionStepPosition&lt;P&gt;): undefined | string Inherited from default.processMove Parameters move: ActionStepPosition&lt;P&gt; Returns undefined | string repeat repeat(): ok | complete Inherited from default.repeat Returns ok | complete reset reset(): void Overrides default.reset Returns void setBranchFromJSON setBranchFromJSON(branch: FlowBranchJSON[]): void Inherited from default.setBranchFromJSON Parameters branch: FlowBranchJSON[] Returns void setPosition setPosition(position: any, sequence?: number, reset?: boolean): void Inherited from default.setPosition Parameters position: any optionalsequence: number reset: boolean = true Returns void setPositionFromJSON setPositionFromJSON(positionJSON: any, sequence?: number): void Inherited from default.setPositionFromJSON Parameters positionJSON: any optionalsequence: number Returns void toJSON toJSON(forPlayer?: boolean): { collection: any; index: number; value: any } Overrides default.toJSON Parameters forPlayer: boolean = true Returns { collection: any; index: number; value: any } collection: any index: number value: any toString toString(): string Overrides default.toString Returns string validateNoDuplicate validateNoDuplicate(): void Inherited from default.validateNoDuplicate Returns void","keywords":"","version":"Next"},{"title":"Action <P, A>","type":0,"sectionRef":"#","url":"/api/class/Action","content":"Action &lt;P, A&gt; Actions represent discreet moves players can make. The Action object is responsible for: providing Selection objects to players to aid in supplying appropriate Argumentsvalidating player Arguments and returning any Selections needed to completeaccepting player Arguments and altering board state Index Constructors constructor Properties conditionmessagemovesnamepromptselections Methods chooseFromchooseNumberchooseOnBoardconfirmdoenterTextgetResolvedSelectionsisPossiblemovenextSelectionprocess Constructors constructor new Action&lt;P, A&gt;(__namedParameters: { condition?: boolean | () =&gt; boolean; message?: string | (...args: Argument&lt;P&gt;[]) =&gt; string; prompt: string }): default&lt;P, A&gt; Type parameters P: defaultA: Argument&lt;P&gt;[] Parameters __namedParameters: { condition?: boolean | () =&gt; boolean; message?: string | (...args: Argument&lt;P&gt;[]) =&gt; string; prompt: string } Returns default&lt;P, A&gt; Properties optionalcondition condition?: boolean | () =&gt; boolean optionalmessage message?: string | (...args: Argument&lt;P&gt;[]) =&gt; string moves moves: (...args: Argument&lt;P&gt;[]) =&gt; void[] = [] optionalname name?: string prompt prompt: string selections selections: default&lt;P&gt;[] = [] Methods chooseFrom chooseFrom&lt;T&gt;(__namedParameters: { choices: T[] | Record&lt;string, T&gt; | (...arg: A) =&gt; T[] | Record&lt;string, T&gt;; expand?: boolean; initial?: T | (...arg: A) =&gt; T; prompt?: string | (...arg: A) =&gt; string; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean }): default&lt;P, [...A[], T]&gt; Type parameters T: string | number | boolean | default | default&lt;P&gt; Parameters __namedParameters: { choices: T[] | Record&lt;string, T&gt; | (...arg: A) =&gt; T[] | Record&lt;string, T&gt;; expand?: boolean; initial?: T | (...arg: A) =&gt; T; prompt?: string | (...arg: A) =&gt; string; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean } Returns default&lt;P, [...A[], T]&gt; chooseNumber chooseNumber(__namedParameters: { expand?: boolean; initial?: number | (...arg: A) =&gt; number; max?: number | (...arg: A) =&gt; number; min?: number | (...arg: A) =&gt; number; prompt?: string | (...arg: A) =&gt; string; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean }): default&lt;P, [...A[], number]&gt; Parameters __namedParameters: { expand?: boolean; initial?: number | (...arg: A) =&gt; number; max?: number | (...arg: A) =&gt; number; min?: number | (...arg: A) =&gt; number; prompt?: string | (...arg: A) =&gt; string; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean } Returns default&lt;P, [...A[], number]&gt; chooseOnBoard chooseOnBoard&lt;T&gt;(__namedParameters: { choices: BoardQueryMulti&lt;P, T&gt;; expand?: boolean; prompt?: string | (...arg: A) =&gt; string; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean }): default&lt;P, [...A[], T]&gt;chooseOnBoard&lt;T&gt;(__namedParameters: { choices: BoardQueryMulti&lt;P, T&gt;; expand?: boolean; max?: number | (...arg: A) =&gt; number; min?: number | (...arg: A) =&gt; number; number?: number | (...arg: A) =&gt; number; prompt?: string | (...arg: A) =&gt; string; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean }): default&lt;P, [...A[], T[]]&gt; Type parameters T: default&lt;P&gt; Parameters __namedParameters: { choices: BoardQueryMulti&lt;P, T&gt;; expand?: boolean; prompt?: string | (...arg: A) =&gt; string; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean } Returns default&lt;P, [...A[], T]&gt; confirm confirm(prompt: string | (...arg: A) =&gt; string): default&lt;P, [...A[], confirm]&gt; Parameters prompt: string | (...arg: A) =&gt; string Returns default&lt;P, [...A[], confirm]&gt; do do(move: (...args: A) =&gt; void): default&lt;P, A&gt; Parameters move: (...args: A) =&gt; void Returns default&lt;P, A&gt; enterText enterText(__namedParameters: { initial?: string | (...a: Argument&lt;P&gt;[]) =&gt; string; prompt: string | (...arg: A) =&gt; string; regexp?: RegExp }): default&lt;P, [...A[], string]&gt; Parameters __namedParameters: { initial?: string | (...a: Argument&lt;P&gt;[]) =&gt; string; prompt: string | (...arg: A) =&gt; string; regexp?: RegExp } Returns default&lt;P, [...A[], string]&gt; getResolvedSelections getResolvedSelections(...args: Argument&lt;P&gt;[]): undefined | PendingMove&lt;P&gt;[] Parameters rest...args: Argument&lt;P&gt;[] Returns undefined | PendingMove&lt;P&gt;[] isPossible isPossible(): boolean Returns boolean move move&lt;E, I&gt;(__namedParameters: { into: BoardQuerySingle&lt;P, I&gt;; piece: BoardQuerySingle&lt;P, E&gt;; prompt?: string }): default&lt;P, A&gt;move&lt;E, I&gt;(__namedParameters: { choosePiece: BoardQueryMulti&lt;P, E&gt;; into: BoardQuerySingle&lt;P, I&gt;; prompt?: string }): default&lt;P, [...A[], E]&gt;move&lt;E, I&gt;(__namedParameters: { chooseInto: BoardQueryMulti&lt;P, I&gt;; piece: BoardQuerySingle&lt;P, E&gt;; prompt?: string; promptInto?: string }): default&lt;P, [...A[], I]&gt;move&lt;E, I&gt;(__namedParameters: { chooseInto: BoardQueryMulti&lt;P, I&gt;; choosePiece: BoardQueryMulti&lt;P, E&gt;; prompt?: string; promptInto?: string }): default&lt;P, [...A[], E, I]&gt; Type parameters E: default&lt;P&gt;I: default&lt;P&gt; Parameters __namedParameters: { into: BoardQuerySingle&lt;P, I&gt;; piece: BoardQuerySingle&lt;P, E&gt;; prompt?: string } Returns default&lt;P, A&gt; nextSelection nextSelection(...args: Argument&lt;P&gt;[]): undefined | ResolvedSelection&lt;P&gt; given a partial arg list, returns a selection object for continuation if one exists. Parameters rest...args: Argument&lt;P&gt;[] Returns undefined | ResolvedSelection&lt;P&gt; process process(...args: Argument&lt;P&gt;[]): undefined | string process this action with supplied args. returns error if any Parameters rest...args: Argument&lt;P&gt;[] Returns undefined | string","keywords":"","version":"Next"},{"title":"EachPlayer <P>","type":0,"sectionRef":"#","url":"/api/class/EachPlayer","content":"EachPlayer &lt;P&gt; Hierarchy default&lt;P, P&gt; EachPlayer Index Constructors constructor Properties blockgameinitialnamenextparentpositionsequencesteptoptypewhile Methods actionNeededadvanceallStepsbranchJSONcurrentBlockcurrentFlowcurrentLoopflowStepArgsfromJSONgetStepplayplayOneStepprocessMoverepeatresetsetBranchFromJSONsetPositionsetPositionFromJSONtoJSONtoStringvalidateNoDuplicate Constructors constructor new EachPlayer&lt;P&gt;(__namedParameters: { continueUntil?: (p: P) =&gt; boolean; do: FlowDefinition&lt;P&gt;; name: string; nextPlayer?: (p: P) =&gt; P; startingPlayer?: P | (a: Record&lt;any, any&gt;) =&gt; P; turns?: number }): default&lt;P&gt; Overrides default.constructor Type parameters P: default Parameters __namedParameters: { continueUntil?: (p: P) =&gt; boolean; do: FlowDefinition&lt;P&gt;; name: string; nextPlayer?: (p: P) =&gt; P; startingPlayer?: P | (a: Record&lt;any, any&gt;) =&gt; P; turns?: number } Returns default&lt;P&gt; Properties block block: FlowDefinition&lt;P&gt; Inherited from default.block game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game initial initial: P | (a?: Record&lt;string, any&gt;) =&gt; P Inherited from default.initial optionalname name?: string Inherited from default.name next next: (a: P) =&gt; P Inherited from default.next Type declaration (a: P): P Parameters a: P Returns P optionalparent parent?: default&lt;P&gt; Inherited from default.parent position position: ForLoopPosition&lt;P&gt; Inherited from default.position optionalsequence sequence?: number Inherited from default.sequence optionalstep step?: FlowStep&lt;P&gt; Inherited from default.step top top: default&lt;P&gt; Inherited from default.top type type: sequence | loop | foreach | switch-case | action = 'loop' Inherited from default.type while while: (a: P) =&gt; boolean Inherited from default.while Type declaration (a: P): boolean Parameters a: P Returns boolean Methods actionNeeded actionNeeded(): undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Inherited from default.actionNeeded Returns undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } advance advance(): ok | complete Inherited from default.advance Returns ok | complete allSteps allSteps(): FlowDefinition&lt;P&gt; Overrides default.allSteps Returns FlowDefinition&lt;P&gt; branchJSON branchJSON(forPlayer?: boolean): FlowBranchJSON[] Inherited from default.branchJSON Parameters forPlayer: boolean = true Returns FlowBranchJSON[] currentBlock currentBlock(): undefined | FlowDefinition&lt;P&gt; Inherited from default.currentBlock Returns undefined | FlowDefinition&lt;P&gt; currentFlow currentFlow(): default&lt;P&gt; Inherited from default.currentFlow Returns default&lt;P&gt; currentLoop currentLoop(): undefined | (default&lt;P&gt; &amp; { repeat: Function }) Inherited from default.currentLoop Returns undefined | (default&lt;P&gt; &amp; { repeat: Function }) flowStepArgs flowStepArgs(): Record&lt;string, any&gt; Inherited from default.flowStepArgs Returns Record&lt;string, any&gt; fromJSON fromJSON(position: any): { index: any; value: undefined | P } Overrides default.fromJSON Parameters position: any Returns { index: any; value: undefined | P } index: any value: undefined | P getStep getStep(name: string): undefined | default&lt;P&gt; Inherited from default.getStep Parameters name: string Returns undefined | default&lt;P&gt; play play(): void | string[] Inherited from default.play Returns void | string[] playOneStep playOneStep(): string[] | ok | complete Inherited from default.playOneStep advance flow one step and return ‘complete’ if complete, ‘ok’ if can continue, ‘skip’/‘repeat’ to skip/repeat the current loop. return a list of actions if now waiting for player input. override for self-contained flows that do not have subflows. Returns string[] | ok | complete processMove processMove(move: ActionStepPosition&lt;P&gt;): undefined | string Inherited from default.processMove Parameters move: ActionStepPosition&lt;P&gt; Returns undefined | string repeat repeat(): ok | complete Inherited from default.repeat Returns ok | complete reset reset(): void Inherited from default.reset Returns void setBranchFromJSON setBranchFromJSON(branch: FlowBranchJSON[]): void Inherited from default.setBranchFromJSON Parameters branch: FlowBranchJSON[] Returns void setPosition setPosition(position: ForLoopPosition&lt;P&gt;, sequence?: number, reset?: boolean): void Overrides default.setPosition Parameters position: ForLoopPosition&lt;P&gt; optionalsequence: number reset: boolean = true Returns void setPositionFromJSON setPositionFromJSON(positionJSON: any, sequence?: number): void Inherited from default.setPositionFromJSON Parameters positionJSON: any optionalsequence: number Returns void toJSON toJSON(): { index: number; value: undefined | SerializedSingleArg } Overrides default.toJSON Returns { index: number; value: undefined | SerializedSingleArg } index: number value: undefined | SerializedSingleArg toString toString(): string Overrides default.toString Returns string validateNoDuplicate validateNoDuplicate(): void Inherited from default.validateNoDuplicate Returns void","keywords":"","version":"Next"},{"title":"ForLoop <P, T>","type":0,"sectionRef":"#","url":"/api/class/ForLoop","content":"ForLoop &lt;P, T&gt; Hierarchy default&lt;P&gt; ForLoop EachPlayerForEach Index Constructors constructor Properties blockgameinitialnamenextparentpositionsequencesteptoptypewhile Methods actionNeededadvanceallStepsbranchJSONcurrentBlockcurrentFlowcurrentLoopflowStepArgsfromJSONgetStepplayplayOneStepprocessMoverepeatresetsetBranchFromJSONsetPositionsetPositionFromJSONtoJSONtoStringvalidateNoDuplicate Constructors constructor new ForLoop&lt;P, T&gt;(__namedParameters: { do: FlowDefinition&lt;P&gt;; initial: T | (a: Record&lt;string, any&gt;) =&gt; T; name: string; next: (a: T) =&gt; T; while: (a: T) =&gt; boolean }): default&lt;P, T&gt; Overrides default.constructor Type parameters P: defaultT = Serializable&lt;P&gt; Parameters __namedParameters: { do: FlowDefinition&lt;P&gt;; initial: T | (a: Record&lt;string, any&gt;) =&gt; T; name: string; next: (a: T) =&gt; T; while: (a: T) =&gt; boolean } Returns default&lt;P, T&gt; Properties block block: FlowDefinition&lt;P&gt; Overrides default.block game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game initial initial: T | (a?: Record&lt;string, any&gt;) =&gt; T optionalname name?: string Inherited from default.name next next: (a: T) =&gt; T Type declaration (a: T): T Parameters a: T Returns T optionalparent parent?: default&lt;P&gt; Inherited from default.parent position position: ForLoopPosition&lt;T&gt; Overrides default.position optionalsequence sequence?: number Inherited from default.sequence optionalstep step?: FlowStep&lt;P&gt; Inherited from default.step top top: default&lt;P&gt; Inherited from default.top type type: sequence | loop | foreach | switch-case | action = 'loop' Overrides default.type while while: (a: T) =&gt; boolean Type declaration (a: T): boolean Parameters a: T Returns boolean Methods actionNeeded actionNeeded(): undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Inherited from default.actionNeeded Returns undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } advance advance(): ok | complete Overrides default.advance Returns ok | complete allSteps allSteps(): FlowDefinition&lt;P&gt; Inherited from default.allSteps Returns FlowDefinition&lt;P&gt; branchJSON branchJSON(forPlayer?: boolean): FlowBranchJSON[] Inherited from default.branchJSON Parameters forPlayer: boolean = true Returns FlowBranchJSON[] currentBlock currentBlock(): undefined | FlowDefinition&lt;P&gt; Overrides default.currentBlock Returns undefined | FlowDefinition&lt;P&gt; currentFlow currentFlow(): default&lt;P&gt; Inherited from default.currentFlow Returns default&lt;P&gt; currentLoop currentLoop(): undefined | (default&lt;P&gt; &amp; { repeat: Function }) Inherited from default.currentLoop Returns undefined | (default&lt;P&gt; &amp; { repeat: Function }) flowStepArgs flowStepArgs(): Record&lt;string, any&gt; Inherited from default.flowStepArgs Returns Record&lt;string, any&gt; fromJSON fromJSON(json: any): undefined | Position&lt;P&gt; Inherited from default.fromJSON Parameters json: any Returns undefined | Position&lt;P&gt; getStep getStep(name: string): undefined | default&lt;P&gt; Inherited from default.getStep Parameters name: string Returns undefined | default&lt;P&gt; play play(): void | string[] Inherited from default.play Returns void | string[] playOneStep playOneStep(): string[] | ok | complete Inherited from default.playOneStep advance flow one step and return ‘complete’ if complete, ‘ok’ if can continue, ‘skip’/‘repeat’ to skip/repeat the current loop. return a list of actions if now waiting for player input. override for self-contained flows that do not have subflows. Returns string[] | ok | complete processMove processMove(move: ActionStepPosition&lt;P&gt;): undefined | string Inherited from default.processMove Parameters move: ActionStepPosition&lt;P&gt; Returns undefined | string repeat repeat(): ok | complete Returns ok | complete reset reset(): void Overrides default.reset Returns void setBranchFromJSON setBranchFromJSON(branch: FlowBranchJSON[]): void Inherited from default.setBranchFromJSON Parameters branch: FlowBranchJSON[] Returns void setPosition setPosition(position: any, sequence?: number, reset?: boolean): void Inherited from default.setPosition Parameters position: any optionalsequence: number reset: boolean = true Returns void setPositionFromJSON setPositionFromJSON(positionJSON: any, sequence?: number): void Inherited from default.setPositionFromJSON Parameters positionJSON: any optionalsequence: number Returns void toJSON toJSON(forPlayer?: boolean): any Inherited from default.toJSON Parameters forPlayer: boolean = true Returns any toString toString(): string Overrides default.toString Returns string validateNoDuplicate validateNoDuplicate(): void Inherited from default.validateNoDuplicate Returns void","keywords":"","version":"Next"},{"title":"ElementCollection <P, T>","type":0,"sectionRef":"#","url":"/api/class/ElementCollection","content":"ElementCollection &lt;P, T&gt; Hierarchy Array&lt;T&gt; ElementCollection Index Constructors constructor Properties bottombottomNtoptopN Methods _finderallappearanceareAllEqualfirstfirstNlastlastNlayoutmaxminputIntoremoveslicesortBysortedBysumwithHighestwithLowest Constructors constructor new ElementCollection&lt;P, T&gt;(...collection: T[]): default&lt;P, T&gt; Overrides Array&lt;T&gt;.constructor Type parameters P: defaultT: default&lt;P&gt; Parameters rest...collection: T[] Returns default&lt;P, T&gt; Properties bottom bottom: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F bottomN bottomN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; top top: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F topN topN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; Methods _finder _finder&lt;F&gt;(className: ElementClass&lt;P, F&gt;, options: { limit?: number; order?: asc | desc }, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; options: { limit?: number; order?: asc | desc } rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; all all&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;all&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; appearance appearance(appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: T) =&gt; null | Element; zoomable?: boolean | (el: T) =&gt; boolean }): void Parameters appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: T) =&gt; null | Element; zoomable?: boolean | (el: T) =&gt; boolean } Returns void areAllEqual areAllEqual(key: keyof T): boolean Parameters key: keyof T Returns boolean first first&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;first&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; firstN firstN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;firstN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; last last&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;last&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; lastN lastN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;lastN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; layout layout(applyTo: T[_ui][layouts][number][applyTo], attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt;): void Parameters applyTo: T[_ui][layouts][number][applyTo] attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt; Returns void max max&lt;K&gt;(key: K): undefined | T[K] Type parameters K: string | number | symbol Parameters key: K Returns undefined | T[K] min min&lt;K&gt;(key: K): undefined | T[K] Type parameters K: string | number | symbol Parameters key: K Returns undefined | T[K] putInto putInto(to: default&lt;P&gt;, options?: { fromBottom?: number; fromTop?: number; position?: number }): void Parameters to: default&lt;P&gt; optionaloptions: { fromBottom?: number; fromTop?: number; position?: number } Returns void remove remove(): void Returns void slice slice(...a: any[]): default&lt;P, T&gt; Overrides Array.slice Parameters rest...a: any[] Returns default&lt;P, T&gt; sortBy sortBy&lt;E&gt;(key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[], direction?: asc | desc): default&lt;P, T&gt; Type parameters E: default&lt;P&gt; Parameters key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[] optionaldirection: asc | desc Returns default&lt;P, T&gt; sortedBy sortedBy(key: Sorter&lt;T&gt; | Sorter&lt;T&gt;[], direction?: asc | desc): default&lt;P, T&gt; Parameters key: Sorter&lt;T&gt; | Sorter&lt;T&gt;[] direction: asc | desc = &quot;asc&quot; Returns default&lt;P, T&gt; sum sum(key: keyof T | (e: T) =&gt; number): number Parameters key: keyof T | (e: T) =&gt; number Returns number withHighest withHighest(...attributes: Sorter&lt;T&gt;[]): undefined | T Parameters rest...attributes: Sorter&lt;T&gt;[] Returns undefined | T withLowest withLowest(...attributes: Sorter&lt;T&gt;[]): undefined | T Parameters rest...attributes: Sorter&lt;T&gt;[] Returns undefined | T","keywords":"","version":"Next"},{"title":"Player","type":0,"sectionRef":"#","url":"/api/class/Player","content":"Player Index Constructors constructor Properties colornameposition Methods colorEncodedNametoJSON Constructors constructor new Player(): default Returns default Properties publiccolor color: string publicname name: string publicposition position: number Methods colorEncodedName colorEncodedName(): string Returns string toJSON toJSON(): {} Returns {}","keywords":"","version":"Next"},{"title":"Game <P, B>","type":0,"sectionRef":"#","url":"/api/class/Game","content":"Game &lt;P, B&gt; Index Constructors constructor Properties actionsboardflowflowDefinitiongodModemessagesphaseplayersrandomrseedsettingssetupLayoutwinner Methods actionallowedActionsbuildFlowcontextualizeBoardToPlayerdefineActionsdefineBoarddefineFlowdefinePlayersfinishgetPlayerStatesgetResolvedSelectionsgetStategetUpdategodModeActionsinContextOfPlayermessageplayprocessMovesetRandomSeedsetSettingssetStatestarttrackMovement Constructors constructor new Game&lt;P, B&gt;(): default&lt;P, B&gt; Type parameters P: defaultB: default&lt;P&gt; Returns default&lt;P, B&gt; Properties actions actions: (game: default&lt;P, B&gt;, board: B) =&gt; Record&lt;string, (p: P) =&gt; default&lt;P, Argument&lt;P&gt;[]&gt;&gt; Type declaration (game: default&lt;P, B&gt;, board: B): Record&lt;string, (p: P) =&gt; default&lt;P, Argument&lt;P&gt;[]&gt;&gt; Parameters game: default&lt;P, B&gt; board: B Returns Record&lt;string, (p: P) =&gt; default&lt;P, Argument&lt;P&gt;[]&gt;&gt; board board: B flow flow: default&lt;P&gt; flowDefinition flowDefinition: (game: default&lt;P, B&gt;, board: B) =&gt; default&lt;P&gt; Type declaration (game: default&lt;P, B&gt;, board: B): default&lt;P&gt; Parameters game: default&lt;P, B&gt; board: B Returns default&lt;P&gt; godMode godMode: boolean = false messages messages: Message[] = [] phase phase: define | new | started | finished = 'define' players players: default&lt;P&gt; = ... random random: () =&gt; number Type declaration (): number Returns number rseed rseed: string settings settings: Record&lt;string, any&gt; optionalsetupLayout setupLayout?: (board: B, aspectRatio: number) =&gt; void Type declaration (board: B, aspectRatio: number): void Parameters board: B aspectRatio: number Returns void winner winner: P[] = [] Methods action action(name: string, player: P): default&lt;P, any&gt; &amp; { name: string } action functions Parameters name: string player: P Returns default&lt;P, any&gt; &amp; { name: string } allowedActions allowedActions(player: P): { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Parameters player: P Returns { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } actions: string[] expand: boolean optionalprompt?: string skipIfOnlyOne: boolean optionalstep?: string buildFlow buildFlow(): void Returns void contextualizeBoardToPlayer contextualizeBoardToPlayer(player?: P): undefined | P Parameters optionalplayer: P Returns undefined | P defineActions defineActions(actions: (game: default&lt;P, B&gt;, board: B) =&gt; Record&lt;string, (p: P) =&gt; default&lt;P, Argument&lt;P&gt;[]&gt;&gt;): void Parameters actions: (game: default&lt;P, B&gt;, board: B) =&gt; Record&lt;string, (p: P) =&gt; default&lt;P, Argument&lt;P&gt;[]&gt;&gt; Returns void defineBoard defineBoard(className: { isGameElement: boolean }, classRegistry: ElementClass&lt;P, default&lt;P&gt;&gt;[]): B Parameters className: { isGameElement: boolean } classRegistry: ElementClass&lt;P, default&lt;P&gt;&gt;[] Returns B defineFlow defineFlow(flowDefinition: (game: default&lt;P, B&gt;, board: B) =&gt; default&lt;P&gt;): void configuration functions Parameters flowDefinition: (game: default&lt;P, B&gt;, board: B) =&gt; default&lt;P&gt; Returns void definePlayers definePlayers(className: new (...a: any[]) =&gt; P): default&lt;P&gt; Parameters className: new (...a: any[]) =&gt; P Returns default&lt;P&gt; finish finish(winner?: P | P[]): void Parameters optionalwinner: P | P[] Returns void getPlayerStates getPlayerStates(): PlayerPositionState&lt;P&gt;[] Returns PlayerPositionState&lt;P&gt;[] getResolvedSelections getResolvedSelections(player: P, action?: string, ...args: Argument&lt;P&gt;[]): undefined | { moves: PendingMove&lt;P&gt;[]; prompt?: string; step?: string } Parameters player: P optionalaction: string rest...args: Argument&lt;P&gt;[] Returns undefined | { moves: PendingMove&lt;P&gt;[]; prompt?: string; step?: string } getState getState(forPlayer?: number): GameState&lt;P&gt; Parameters optionalforPlayer: number Returns GameState&lt;P&gt; getUpdate getUpdate(): GameUpdate&lt;P&gt; Returns GameUpdate&lt;P&gt; godModeActions godModeActions(): Record&lt;string, default&lt;P, any&gt;&gt; Returns Record&lt;string, default&lt;P, any&gt;&gt; inContextOfPlayer inContextOfPlayer&lt;T&gt;(player: P, fn: () =&gt; T): T Type parameters T Parameters player: P fn: () =&gt; T Returns T message message(message: string, ...args: [...Argument&lt;P&gt;[], Record&lt;string, Argument&lt;P&gt;&gt;] | Argument&lt;P&gt;[]): void Parameters message: string rest...args: [...Argument&lt;P&gt;[], Record&lt;string, Argument&lt;P&gt;&gt;] | Argument&lt;P&gt;[] Returns void play play(): void | string[] Returns void | string[] processMove processMove(__namedParameters: Move&lt;P&gt;): undefined | string Parameters __namedParameters: Move&lt;P&gt; Returns undefined | string setRandomSeed setRandomSeed(rseed: string): void Parameters rseed: string Returns void setSettings setSettings(settings: Record&lt;string, any&gt;): void Parameters settings: Record&lt;string, any&gt; Returns void setState setState(state: GameState&lt;P&gt;): void state management functions Parameters state: GameState&lt;P&gt; Returns void start start(): void flow functions Returns void trackMovement trackMovement(track?: boolean): void Parameters track: boolean = true Returns void","keywords":"","version":"Next"},{"title":"Selection <P>","type":0,"sectionRef":"#","url":"/api/class/Selection","content":"Selection &lt;P&gt; Index Constructors constructor Properties boardChoiceschoicesclientContextexpandinitialmaxminpromptregexpskipIfskipIfOnlyOnetypevalue Methods isForcedisMultiisPossibleisResolvedisUnboundedoptionsoverrideOptionsresolvevalidate Constructors constructor new Selection&lt;P&gt;(s: default&lt;P&gt; | SelectionDefinition&lt;P&gt;): default&lt;P&gt; Type parameters P: default Parameters s: default&lt;P&gt; | SelectionDefinition&lt;P&gt; Returns default&lt;P&gt; Properties optionalboardChoices boardChoices?: BoardQueryMulti&lt;P, default&lt;P&gt;&gt; optionalchoices choices?: SingleArgument&lt;P&gt;[] | Record&lt;string, SingleArgument&lt;P&gt;&gt; | (...a: Argument&lt;P&gt;[]) =&gt; SingleArgument&lt;P&gt;[] | Record&lt;string, SingleArgument&lt;P&gt;&gt; optionalclientContext clientContext?: Record&lt;any, any&gt; expand expand: boolean = false optionalinitial initial?: Argument&lt;P&gt; | (...a: Argument&lt;P&gt;[]) =&gt; Argument&lt;P&gt; optionalmax max?: number | (...a: Argument&lt;P&gt;[]) =&gt; number optionalmin min?: number | (...a: Argument&lt;P&gt;[]) =&gt; number optionalprompt prompt?: string | (...a: Argument&lt;P&gt;[]) =&gt; string optionalregexp regexp?: RegExp optionalskipIf skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean skipIfOnlyOne skipIfOnlyOne: boolean = true type type: number | choices | board | text | button optionalvalue value?: Argument&lt;P&gt; Methods isForced isForced(this: ResolvedSelection&lt;P&gt;): undefined | Argument&lt;P&gt; Parameters this: ResolvedSelection&lt;P&gt; Returns undefined | Argument&lt;P&gt; isMulti isMulti(): boolean Returns boolean isPossible isPossible(this: ResolvedSelection&lt;P&gt;): boolean Parameters this: ResolvedSelection&lt;P&gt; Returns boolean isResolved isResolved(): this is ResolvedSelection&lt;P&gt; Returns this is ResolvedSelection&lt;P&gt; isUnbounded isUnbounded(this: ResolvedSelection&lt;P&gt;): boolean Parameters this: ResolvedSelection&lt;P&gt; Returns boolean options options(this: ResolvedSelection&lt;P&gt;): Argument&lt;P&gt;[] Parameters this: ResolvedSelection&lt;P&gt; Returns Argument&lt;P&gt;[] overrideOptions overrideOptions(options: SingleArgument&lt;P&gt;[]): ResolvedSelection&lt;P&gt; Parameters options: SingleArgument&lt;P&gt;[] Returns ResolvedSelection&lt;P&gt; resolve resolve(...args: Argument&lt;P&gt;[]): ResolvedSelection&lt;P&gt; Parameters rest...args: Argument&lt;P&gt;[] Returns ResolvedSelection&lt;P&gt; validate validate(arg: Argument&lt;P&gt;, previousArgs: Argument&lt;P&gt;[]): undefined | string check specific selection with a given arg. evaluates within the context of previous args, so any selection elements that have previous-arg-function forms are here evaluated with the previous args. returns new selection and error if any Parameters arg: Argument&lt;P&gt; previousArgs: Argument&lt;P&gt;[] Returns undefined | string","keywords":"","version":"Next"},{"title":"PlayerCollection <P>","type":0,"sectionRef":"#","url":"/api/class/PlayerCollection","content":"PlayerCollection &lt;P&gt; Hierarchy Array&lt;P&gt; PlayerCollection Index Constructors constructor Properties classNamecurrentPositiongame Methods addPlayerafteratPositioncurrentfromJSONinPositionOrdermaxminnextnotCurrentsetCurrentshufflesortBysortedBysumturnOrderOfwithHighestwithLowest Constructors externalconstructor new PlayerCollection&lt;P&gt;(arrayLength: number): default&lt;P&gt;new PlayerCollection&lt;P&gt;(...items: P[]): default&lt;P&gt; Inherited from Array&lt;P&gt;.constructor Type parameters P: default Parameters externalarrayLength: number Returns default&lt;P&gt; Properties className className: new (...a: any[]) =&gt; P Type declaration new (...a: any[]): P Parameters rest...a: any[] Returns P optionalcurrentPosition currentPosition?: number game game: default&lt;P, default&lt;P&gt;&gt; Methods addPlayer addPlayer(attrs: PlayerAttributes&lt;P&gt;): void Parameters attrs: PlayerAttributes&lt;P&gt; Returns void after after(player: number | P): P Parameters player: number | P Returns P atPosition atPosition(position: number): undefined | P Parameters position: number Returns undefined | P current current(): P Returns P fromJSON fromJSON(players: PlayerAttributes&lt;P&gt;[]): void Parameters players: PlayerAttributes&lt;P&gt;[] Returns void inPositionOrder inPositionOrder(): default&lt;P&gt; Returns default&lt;P&gt; max max&lt;K&gt;(key: K): P[K] Type parameters K: string | number | symbol Parameters key: K Returns P[K] min min&lt;K&gt;(key: K): P[K] Type parameters K: string | number | symbol Parameters key: K Returns P[K] next next(): P Returns P notCurrent notCurrent(): P[] Returns P[] setCurrent setCurrent(player: number | P): P Parameters player: number | P Returns P shuffle shuffle(): void Returns void sortBy sortBy(key: Sorter&lt;P&gt; | Sorter&lt;P&gt;[], direction?: asc | desc): default&lt;P&gt; Parameters key: Sorter&lt;P&gt; | Sorter&lt;P&gt;[] optionaldirection: asc | desc Returns default&lt;P&gt; sortedBy sortedBy(key: Sorter&lt;P&gt; | Sorter&lt;P&gt;[], direction?: asc | desc): default&lt;P&gt; Parameters key: Sorter&lt;P&gt; | Sorter&lt;P&gt;[] direction: asc | desc = &quot;asc&quot; Returns default&lt;P&gt; sum sum(key: keyof P | (e: P) =&gt; number): number Parameters key: keyof P | (e: P) =&gt; number Returns number turnOrderOf turnOrderOf(player: number | P): number Parameters player: number | P Returns number withHighest withHighest(...attributes: Sorter&lt;P&gt;[]): P Parameters rest...attributes: Sorter&lt;P&gt;[] Returns P withLowest withLowest(...attributes: Sorter&lt;P&gt;[]): P Parameters rest...attributes: Sorter&lt;P&gt;[] Returns P","keywords":"","version":"Next"},{"title":"@boardzilla/core","type":0,"sectionRef":"#","url":"/api","content":"@boardzilla/core Index Classes ActionActionStepBoardEachPlayerElementCollectionFlowFlowInterruptAndRepeatFlowInterruptAndSkipForEachForLoopGameGameElementIfPiecePlayerPlayerCollectionSelectionSpaceSwitchCaseWhileLoop Functions ElementPlayerControlsSeatingactionboardDebugcellSizeForAreachoiceSettingcombinationscreateIntefacedebugdeserializedeserializeArgdeserializeObjectdeserializeSingleArgeachPlayerescapeArgumentflowDebugforEachforLoopgamegamegameStorehumanizeArgifElseimportsisAmainnumberSettingplayerActionsrangerepeatscaleserializeserializeArgserializeObjectserializeSingleArgsetupshiftshuffleArrayskipswitchCasetextSettingtimestoggleSettingtranslateuiunionwhileLoop Type Aliases ActionLayoutActionStepPositionArgumentBoardQueryBoardQueryMultiBoardQuerySingleBoardSelectionBoxButtonSelectionChoiceSelectionElementAttributesElementClassElementContextElementEventHandlerElementFinderElementJSONElementUIFlowBranchJSONFlowBranchNodeFlowDefinitionFlowStepForEachPositionForLoopPositionGameElementSerializationGameFinishedEventGameFinishedStateGameInterfaceGameSettingsGameStartedStateGameStateGameUpdateGameUpdateEventLayoutMessageMessageProcessedEventMoveMoveMessageNumberSelectionPendingMovePlayerAttributesPlayerOperationPlayerPositionStatePlayersEventPositionReadyMessageReserveOperationResolvedSelectionSeatOperationSelectionDefinitionSerializableSerializedArgSerializedMoveSerializedSingleArgSettingsUpdateEventSetupComponentPropsSetupFunctionSetupPlayerSetupStateSingleArgumentSorterStartMessageSwitchCaseCasesSwitchCasePostionSwitchPlayerMessageTextSelectionUIOptionsUnseatOperationUpdateOperationUpdatePlayersMessageUpdateSettingsMessageUserUserPlayerVectorWhileLoopPosition Type Aliases ActionLayout ActionLayout&lt;P&gt;: { bottom?: number; element: GameElement&lt;P&gt; | () =&gt; GameElement&lt;P&gt;; height?: number; left?: number; right?: number; top?: number; width?: number } Type parameters P: Player Type declaration optionalbottom?: number element: GameElement&lt;P&gt; | () =&gt; GameElement&lt;P&gt; optionalheight?: number optionalleft?: number optionalright?: number optionaltop?: number optionalwidth?: number ActionStepPosition ActionStepPosition&lt;P&gt;: { action?: string; args?: Argument&lt;P&gt;[]; player?: number } Type parameters P: Player Type declaration optionalaction?: string optionalargs?: Argument&lt;P&gt;[] optionalplayer?: number Argument Argument&lt;P&gt;: SingleArgument&lt;P&gt; | SingleArgument&lt;P&gt;[] Type parameters P: Player BoardQuery BoardQuery&lt;P, T&gt;: BoardQuerySingle&lt;P, T&gt; | BoardQueryMulti&lt;P, T&gt; Type parameters P: PlayerT: GameElement&lt;P&gt; BoardQueryMulti BoardQueryMulti&lt;P, T&gt;: string | T[] | (...a: Argument&lt;P&gt;[]) =&gt; T[] Type parameters P: PlayerT: GameElement&lt;P&gt; BoardQuerySingle BoardQuerySingle&lt;P, T&gt;: string | T | undefined | (...a: Argument&lt;P&gt;[]) =&gt; T | undefined Type parameters P: PlayerT: GameElement&lt;P&gt; BoardSelection BoardSelection&lt;P, T&gt;: { chooseFrom: BoardQueryMulti&lt;P, T&gt;; max?: number | (...a: Argument&lt;P&gt;[]) =&gt; number; min?: number | (...a: Argument&lt;P&gt;[]) =&gt; number; number?: number | (...a: Argument&lt;P&gt;[]) =&gt; number } Selection objects represent player choices. They either specify the options or provide enough information for the client to contextually show options to players at runtime Type parameters P: PlayerT: GameElement&lt;P&gt; Type declaration chooseFrom: BoardQueryMulti&lt;P, T&gt; optionalmax?: number | (...a: Argument&lt;P&gt;[]) =&gt; number optionalmin?: number | (...a: Argument&lt;P&gt;[]) =&gt; number optionalnumber?: number | (...a: Argument&lt;P&gt;[]) =&gt; number Box Box: { height: number; left: number; top: number; width: number } Type declaration height: number left: number top: number width: number ButtonSelection ButtonSelection&lt;P&gt;: Argument&lt;P&gt; Type parameters P: Player ChoiceSelection ChoiceSelection&lt;P&gt;: { choices: SingleArgument&lt;P&gt;[] | Record&lt;string, SingleArgument&lt;P&gt;&gt; | (...a: Argument&lt;P&gt;[]) =&gt; SingleArgument&lt;P&gt;[] | Record&lt;string, SingleArgument&lt;P&gt;&gt;; initial?: Argument&lt;P&gt; | (...a: Argument&lt;P&gt;[]) =&gt; Argument&lt;P&gt; } Type parameters P: Player Type declaration choices: SingleArgument&lt;P&gt;[] | Record&lt;string, SingleArgument&lt;P&gt;&gt; | (...a: Argument&lt;P&gt;[]) =&gt; SingleArgument&lt;P&gt;[] | Record&lt;string, SingleArgument&lt;P&gt;&gt; optionalinitial?: Argument&lt;P&gt; | (...a: Argument&lt;P&gt;[]) =&gt; Argument&lt;P&gt; ElementAttributes ElementAttributes&lt;P, T&gt;: Partial&lt;Pick&lt;T, { [ K in keyof T ]: K extends keyof GameElement&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T] | name | player&gt;&gt; Type parameters P: PlayerT: GameElement&lt;P&gt; ElementClass ElementClass&lt;P, T&gt;: { isGameElement: boolean } &amp; Record&lt;any, any&gt; Type parameters P: PlayerT: GameElement&lt;P&gt; ElementContext ElementContext&lt;P&gt;: { classRegistry: ElementClass&lt;P, GameElement&lt;P&gt;&gt;[]; moves: Record&lt;string, string&gt;; player?: P; removed: GameElement&lt;P&gt;; sequence: number; top: GameElement&lt;P&gt; } &amp; Record&lt;string, any&gt; Type parameters P: Player ElementEventHandler ElementEventHandler&lt;P, T&gt;: { callback: (el: T) =&gt; void } &amp; Record&lt;any, any&gt; Type parameters P: PlayerT: GameElement&lt;P&gt; ElementFinder ElementFinder&lt;P, T&gt;: (e: T) =&gt; boolean | (ElementAttributes&lt;P, T&gt; &amp; { adjacent?: boolean; empty?: boolean; mine?: boolean; withinDistance?: number }) | string Type parameters P: PlayerT: GameElement&lt;P&gt; ElementJSON ElementJSON: { children?: ElementJSON[]; className: string } &amp; Record&lt;string, any&gt; ElementUI ElementUI&lt;P, T&gt;: { appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; JSX.Element | null; labelScale?: number; style?: string; thickness?: number }; render?: (el: T) =&gt; JSX.Element | null | false; zoomable?: boolean | (el: T) =&gt; boolean }; computedStyle?: Box; layouts: { applyTo: ElementClass&lt;P, GameElement&lt;P&gt;&gt; | GameElement&lt;P&gt; | ElementCollection&lt;P, GameElement&lt;P&gt;&gt; | string; attributes: { alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fit | fill | none; size?: { height: number; width: number }; slots?: Box[] } }[] } Type parameters P: PlayerT: GameElement&lt;P&gt; Type declaration appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; JSX.Element | null; labelScale?: number; style?: string; thickness?: number }; render?: (el: T) =&gt; JSX.Element | null | false; zoomable?: boolean | (el: T) =&gt; boolean } optionalaspectRatio?: number optionalclassName?: string optionalconnections?: { color?: string; fill?: string; label?: (arg: any) =&gt; JSX.Element | null; labelScale?: number; style?: string; thickness?: number } optionalcolor?: string optionalfill?: string optionallabel?: (arg: any) =&gt; JSX.Element | null (arg: any): JSX.Element | null Parameters arg: any Returns JSX.Element | null optionallabelScale?: number optionalstyle?: string optionalthickness?: number optionalrender?: (el: T) =&gt; JSX.Element | null | false optionalzoomable?: boolean | (el: T) =&gt; boolean optionalcomputedStyle?: Box layouts: { applyTo: ElementClass&lt;P, GameElement&lt;P&gt;&gt; | GameElement&lt;P&gt; | ElementCollection&lt;P, GameElement&lt;P&gt;&gt; | string; attributes: { alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fit | fill | none; size?: { height: number; width: number }; slots?: Box[] } }[] FlowBranchJSON FlowBranchJSON: Omit&lt;FlowBranchNode&lt;Player&gt;, position&gt; &amp; { position?: any } FlowBranchNode FlowBranchNode&lt;P&gt;: ({ type: sequence } | { position: ActionStepPosition&lt;P&gt;; type: action } | { position: WhileLoopPosition | ForLoopPosition&lt;any&gt;; type: loop } | { position: ForEachPosition&lt;any&gt;; type: foreach } | { position: SwitchCasePostion&lt;any&gt;; type: switch-case }) &amp; { name?: string; sequence?: number } Type parameters P: Player FlowDefinition FlowDefinition&lt;P&gt;: FlowStep&lt;P&gt; | FlowStep&lt;P&gt;[] Type parameters P: Player FlowStep FlowStep&lt;P&gt;: Flow&lt;P&gt; | (args: Record&lt;string, any&gt;) =&gt; void | null Type parameters P: Player ForEachPosition ForEachPosition&lt;T&gt;: ForLoopPosition&lt;T&gt; &amp; { collection: T[] } Type parameters T ForLoopPosition ForLoopPosition&lt;T&gt;: { index: number; value: T } Type parameters T Type declaration index: number value: T GameElementSerialization GameElementSerialization: player | name GameFinishedEvent GameFinishedEvent: { state: { position: number; state: GameState&lt;Player&gt; }; type: gameFinished; winners: number[] } Type declaration state: { position: number; state: GameState&lt;Player&gt; } position: number state: GameState&lt;Player&gt; type: gameFinished winners: number[] GameFinishedState GameFinishedState&lt;P&gt;: Omit&lt;GameState&lt;P&gt;, currentPlayerPosition&gt; &amp; { phase: finished; winners: number[] } Type parameters P: Player GameInterface GameInterface&lt;P&gt;: { getPlayerState: (state: GameState&lt;P&gt;, position: number) =&gt; GameState&lt;P&gt;; initialState: (state: SetupState&lt;P&gt;, rseed: string) =&gt; GameUpdate&lt;P&gt;; processMove: (previousState: GameState&lt;P&gt;, move: { data: SerializedMove; position: number }, rseed: string) =&gt; GameUpdate&lt;P&gt; } Type parameters P: Player Type declaration getPlayerState: (state: GameState&lt;P&gt;, position: number) =&gt; GameState&lt;P&gt; (state: GameState&lt;P&gt;, position: number): GameState&lt;P&gt; Parameters state: GameState&lt;P&gt; position: number Returns GameState&lt;P&gt; initialState: (state: SetupState&lt;P&gt;, rseed: string) =&gt; GameUpdate&lt;P&gt; (state: SetupState&lt;P&gt;, rseed: string): GameUpdate&lt;P&gt; Parameters state: SetupState&lt;P&gt; rseed: string Returns GameUpdate&lt;P&gt; processMove: (previousState: GameState&lt;P&gt;, move: { data: SerializedMove; position: number }, rseed: string) =&gt; GameUpdate&lt;P&gt; (previousState: GameState&lt;P&gt;, move: { data: SerializedMove; position: number }, rseed: string): GameUpdate&lt;P&gt; Parameters previousState: GameState&lt;P&gt; move: { data: SerializedMove; position: number } rseed: string Returns GameUpdate&lt;P&gt; GameSettings GameSettings: Record&lt;string, any&gt; GameStartedState GameStartedState&lt;P&gt;: Omit&lt;GameState&lt;P&gt;, currentPlayerPosition&gt; &amp; { currentPlayers: number[]; phase: started } Type parameters P: Player GameState GameState&lt;P&gt;: { board: ElementJSON[]; moves?: Record&lt;string, string&gt;; players: PlayerAttributes&lt;P&gt;[]; position: FlowBranchJSON[]; rseed: string; settings: Record&lt;string, any&gt; } Type parameters P: Player Type declaration board: ElementJSON[] optionalmoves?: Record&lt;string, string&gt; players: PlayerAttributes&lt;P&gt;[] position: FlowBranchJSON[] rseed: string settings: Record&lt;string, any&gt; GameUpdate GameUpdate&lt;P&gt;: { game: GameStartedState&lt;P&gt; | GameFinishedState&lt;P&gt;; messages: Message[]; players: PlayerPositionState&lt;P&gt;[] } Type parameters P: Player Type declaration game: GameStartedState&lt;P&gt; | GameFinishedState&lt;P&gt; messages: Message[] players: PlayerPositionState&lt;P&gt;[] GameUpdateEvent GameUpdateEvent: { currentPlayers: number[]; state: { position: number; state: GameState&lt;Player&gt; }; type: gameUpdate } Type declaration currentPlayers: number[] state: { position: number; state: GameState&lt;Player&gt; } position: number state: GameState&lt;Player&gt; type: gameUpdate Layout Layout: Record&lt;string, any&gt; Message Message: { body: string; position?: number } Type declaration body: string optionalposition?: number MessageProcessedEvent MessageProcessedEvent: { error?: string; id: string; type: messageProcessed } Type declaration optionalerror?: string id: string type: messageProcessed Move Move&lt;P&gt;: { action: string; args: Argument&lt;P&gt;[]; player: P } Type parameters P: Player Type declaration action: string args: Argument&lt;P&gt;[] player: P MoveMessage MoveMessage: { data: { action: string; args: SerializedArg[] }; id: string; type: move } Type declaration data: { action: string; args: SerializedArg[] } action: string args: SerializedArg[] id: string type: move NumberSelection NumberSelection&lt;P&gt;: { initial?: number | (...a: Argument&lt;P&gt;[]) =&gt; number; max?: number | (...a: Argument&lt;P&gt;[]) =&gt; number; min?: number | (...a: Argument&lt;P&gt;[]) =&gt; number } Type parameters P: Player Type declaration optionalinitial?: number | (...a: Argument&lt;P&gt;[]) =&gt; number optionalmax?: number | (...a: Argument&lt;P&gt;[]) =&gt; number optionalmin?: number | (...a: Argument&lt;P&gt;[]) =&gt; number PendingMove PendingMove&lt;P&gt;: { action: string; args: Argument&lt;P&gt;[]; selection: ResolvedSelection&lt;P&gt; } Type parameters P: Player Type declaration action: string args: Argument&lt;P&gt;[] selection: ResolvedSelection&lt;P&gt; PlayerAttributes PlayerAttributes&lt;T&gt;: { [ K in keyof InstanceType&lt;new (...args: any[]) =&gt; T&gt; as InstanceType&lt;new (...args: any[]) =&gt; T&gt;[K] extends (...args: unknown[]) =&gt; unknown ? never : K ]: InstanceType&lt;new (...args: any[]) =&gt; T&gt;[K] } Type parameters T: Player PlayerOperation PlayerOperation: SeatOperation | UnseatOperation | UpdateOperation | ReserveOperation PlayerPositionState PlayerPositionState&lt;P&gt;: { position: number; state: GameState&lt;P&gt; } Type parameters P: Player Type declaration position: number state: GameState&lt;P&gt; PlayersEvent PlayersEvent: { players: UserPlayer[]; type: players; users: User[] } Type declaration players: UserPlayer[] type: players users: User[] Position Position&lt;P&gt;: ActionStepPosition&lt;P&gt; | ForLoopPosition&lt;any&gt; | WhileLoopPosition | ForEachPosition&lt;any&gt; | SwitchCasePostion&lt;any&gt; Type parameters P: Player ReadyMessage ReadyMessage: { type: ready } Type declaration type: ready ReserveOperation ReserveOperation: { color: string; name: string; position: number; settings?: any; type: reserve } Type declaration color: string name: string position: number optionalsettings?: any type: reserve ResolvedSelection ResolvedSelection&lt;P&gt;: Omit&lt;Selection&lt;P&gt;, prompt | choices | boardChoices | min | max | initial | regexp&gt; &amp; { boardChoices?: GameElement&lt;P&gt;[]; choices?: SingleArgument&lt;P&gt;[] | Record&lt;string, SingleArgument&lt;P&gt;&gt;; initial?: Argument&lt;P&gt;; max?: number; min?: number; prompt?: string; regexp?: RegExp } Type parameters P: Player SeatOperation SeatOperation: { color: string; name: string; position: number; settings?: any; type: seat; userID: string } Type declaration color: string name: string position: number optionalsettings?: any type: seat userID: string SelectionDefinition SelectionDefinition&lt;P&gt;: { clientContext?: Record&lt;any, any&gt;; prompt?: string | (...a: Argument&lt;P&gt;[]) =&gt; string } &amp; ({ enterText?: never; expand?: boolean; selectFromChoices?: never; selectNumber?: never; selectOnBoard: BoardSelection&lt;P, GameElement&lt;P&gt;&gt;; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean; value?: never } | { enterText?: never; expand?: boolean; selectFromChoices: ChoiceSelection&lt;P&gt;; selectNumber?: never; selectOnBoard?: never; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean; value?: never } | { enterText?: never; expand?: boolean; selectFromChoices?: never; selectNumber: NumberSelection&lt;P&gt;; selectOnBoard?: never; skipIf?: boolean | (...a: Argument&lt;P&gt;[]) =&gt; boolean; skipIfOnlyOne?: boolean; value?: never } | { enterText: TextSelection&lt;P&gt;; selectFromChoices?: never; selectNumber?: never; selectOnBoard?: never; value?: never } | { enterText?: never; selectFromChoices?: never; selectNumber?: never; selectOnBoard?: never; value: ButtonSelection&lt;P&gt; }) Type parameters P: Player Serializable Serializable&lt;P&gt;: SingleArgument&lt;P&gt; | null | undefined | Serializable&lt;P&gt;[] | {} Type parameters P: Player SerializedArg SerializedArg: SerializedSingleArg | SerializedSingleArg[] SerializedMove SerializedMove: { action: string; args: SerializedArg[] } Type declaration action: string args: SerializedArg[] SerializedSingleArg SerializedSingleArg: string | number | boolean SettingsUpdateEvent SettingsUpdateEvent: { settings: GameSettings; type: settingsUpdate } Type declaration settings: GameSettings type: settingsUpdate SetupComponentProps SetupComponentProps: { name: string; players: SetupPlayer[]; settings: Record&lt;string, any&gt;; updateKey: (key: string, value: any) =&gt; void } Type declaration name: string players: SetupPlayer[] settings: Record&lt;string, any&gt; updateKey: (key: string, value: any) =&gt; void (key: string, value: any): void Parameters key: string value: any Returns void SetupFunction SetupFunction&lt;P, B&gt;: (state: SetupState&lt;P&gt; | GameState&lt;P&gt;, options?: { currentPlayerPosition?: number; start?: boolean; trackMovement?: boolean }) =&gt; Game&lt;P, B&gt; Type parameters P: PlayerB: Board&lt;P&gt; Type declaration (state: SetupState&lt;P&gt; | GameState&lt;P&gt;, options?: { currentPlayerPosition?: number; start?: boolean; trackMovement?: boolean }): Game&lt;P, B&gt; Parameters state: SetupState&lt;P&gt; | GameState&lt;P&gt; optionaloptions: { currentPlayerPosition?: number; start?: boolean; trackMovement?: boolean } Returns Game&lt;P, B&gt; SetupPlayer SetupPlayer: { color: string; name: string; position: number; settings?: any } Type declaration color: string name: string position: number optionalsettings?: any SetupState SetupState&lt;P&gt;: { players: (PlayerAttributes&lt;P&gt; &amp; Record&lt;string, any&gt;)[]; settings: Record&lt;string, any&gt; } Type parameters P: Player Type declaration players: (PlayerAttributes&lt;P&gt; &amp; Record&lt;string, any&gt;)[] settings: Record&lt;string, any&gt; SingleArgument SingleArgument&lt;P&gt;: string | number | boolean | GameElement&lt;P&gt; | P Type parameters P: Player Sorter Sorter&lt;T&gt;: keyof { [ K in keyof T ]: T[K] extends number | string ? never : K } | (e: T) =&gt; number | string Type parameters T StartMessage StartMessage: { id: string; type: start } Type declaration id: string type: start SwitchCaseCases SwitchCaseCases&lt;P, T&gt;: { do: FlowDefinition&lt;P&gt;; eq: T }[] | { do: FlowDefinition&lt;P&gt;; test: (a: T) =&gt; boolean }[] Type parameters P: PlayerT SwitchCasePostion SwitchCasePostion&lt;T&gt;: { default?: boolean; index?: number; value?: T } Type parameters T Type declaration optionaldefault?: boolean optionalindex?: number optionalvalue?: T SwitchPlayerMessage SwitchPlayerMessage: { index: number; type: switchPlayer } Type declaration index: number type: switchPlayer TextSelection TextSelection&lt;P&gt;: { initial?: string | (...a: Argument&lt;P&gt;[]) =&gt; string; regexp?: RegExp } Type parameters P: Player Type declaration optionalinitial?: string | (...a: Argument&lt;P&gt;[]) =&gt; string optionalregexp?: RegExp UIOptions UIOptions: { settings?: Record&lt;string, (p: SetupComponentProps) =&gt; JSX.Element&gt; } Type declaration optionalsettings?: Record&lt;string, (p: SetupComponentProps) =&gt; JSX.Element&gt; UnseatOperation UnseatOperation: { position: number; type: unseat } Type declaration position: number type: unseat UpdateOperation UpdateOperation: { color?: string; name?: string; position: number; settings?: any; type: update } Type declaration optionalcolor?: string optionalname?: string position: number optionalsettings?: any type: update UpdatePlayersMessage UpdatePlayersMessage: { id: string; operations: PlayerOperation[]; type: updatePlayers } Type declaration id: string operations: PlayerOperation[] type: updatePlayers UpdateSettingsMessage UpdateSettingsMessage: { id: string; settings: GameSettings; type: updateSettings } Type declaration id: string settings: GameSettings type: updateSettings User User: { id: string; name: string } Type declaration id: string name: string UserPlayer UserPlayer: SetupPlayer &amp; { userID?: string } Vector Vector: { x: number; y: number } Type declaration x: number y: number WhileLoopPosition WhileLoopPosition: { index: number } Type declaration index: number","keywords":"","version":"Next"},{"title":"If <P>","type":0,"sectionRef":"#","url":"/api/class/If","content":"If &lt;P&gt; Hierarchy default&lt;P, boolean&gt; If Index Constructors constructor Properties blockcasesdefaultgamenameparentpositionsequencestepswitchtoptype Methods actionNeededadvanceallStepsbranchJSONcurrentBlockcurrentFlowcurrentLoopflowStepArgsfromJSONgetStepplayplayOneStepprocessMoveresetsetBranchFromJSONsetPositionsetPositionFromJSONtoJSONtoStringvalidateNoDuplicate Constructors constructor new If&lt;P&gt;(__namedParameters: { do: FlowDefinition&lt;P&gt;; else?: FlowDefinition&lt;P&gt;; if: (r: Record&lt;any, any&gt;) =&gt; boolean; name?: string }): default&lt;P&gt; Overrides default.constructor Type parameters P: default Parameters __namedParameters: { do: FlowDefinition&lt;P&gt;; else?: FlowDefinition&lt;P&gt;; if: (r: Record&lt;any, any&gt;) =&gt; boolean; name?: string } Returns default&lt;P&gt; Properties optionalblock block?: FlowDefinition&lt;P&gt; Inherited from default.block cases cases: SwitchCaseCases&lt;P, boolean&gt; Inherited from default.cases optionaldefault default?: FlowDefinition&lt;P&gt; Inherited from default.default game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game optionalname name?: string Inherited from default.name optionalparent parent?: default&lt;P&gt; Inherited from default.parent position position: SwitchCasePostion&lt;boolean&gt; Inherited from default.position optionalsequence sequence?: number Inherited from default.sequence optionalstep step?: FlowStep&lt;P&gt; Inherited from default.step switch switch: boolean | (a?: Record&lt;string, any&gt;) =&gt; boolean Inherited from default.switch top top: default&lt;P&gt; Inherited from default.top type type: sequence | loop | foreach | switch-case | action = &quot;switch-case&quot; Inherited from default.type Methods actionNeeded actionNeeded(): undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Inherited from default.actionNeeded Returns undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } advance advance(): ok | complete Inherited from default.advance Returns ok | complete allSteps allSteps(): FlowDefinition&lt;P&gt; Inherited from default.allSteps Returns FlowDefinition&lt;P&gt; branchJSON branchJSON(forPlayer?: boolean): FlowBranchJSON[] Inherited from default.branchJSON Parameters forPlayer: boolean = true Returns FlowBranchJSON[] currentBlock currentBlock(): undefined | FlowDefinition&lt;P&gt; Inherited from default.currentBlock Returns undefined | FlowDefinition&lt;P&gt; currentFlow currentFlow(): default&lt;P&gt; Inherited from default.currentFlow Returns default&lt;P&gt; currentLoop currentLoop(): undefined | (default&lt;P&gt; &amp; { repeat: Function }) Inherited from default.currentLoop Returns undefined | (default&lt;P&gt; &amp; { repeat: Function }) flowStepArgs flowStepArgs(): Record&lt;string, any&gt; Inherited from default.flowStepArgs Returns Record&lt;string, any&gt; fromJSON fromJSON(position: any): { default: any; index: any; value: Serializable&lt;P&gt; } Inherited from default.fromJSON Parameters position: any Returns { default: any; index: any; value: Serializable&lt;P&gt; } default: any index: any value: Serializable&lt;P&gt; getStep getStep(name: string): undefined | default&lt;P&gt; Inherited from default.getStep Parameters name: string Returns undefined | default&lt;P&gt; play play(): void | string[] Inherited from default.play Returns void | string[] playOneStep playOneStep(): string[] | ok | complete Inherited from default.playOneStep advance flow one step and return ‘complete’ if complete, ‘ok’ if can continue, ‘skip’/‘repeat’ to skip/repeat the current loop. return a list of actions if now waiting for player input. override for self-contained flows that do not have subflows. Returns string[] | ok | complete processMove processMove(move: ActionStepPosition&lt;P&gt;): undefined | string Inherited from default.processMove Parameters move: ActionStepPosition&lt;P&gt; Returns undefined | string reset reset(): void Inherited from default.reset Returns void setBranchFromJSON setBranchFromJSON(branch: FlowBranchJSON[]): void Inherited from default.setBranchFromJSON Parameters branch: FlowBranchJSON[] Returns void setPosition setPosition(position: any, sequence?: number, reset?: boolean): void Inherited from default.setPosition Parameters position: any optionalsequence: number reset: boolean = true Returns void setPositionFromJSON setPositionFromJSON(positionJSON: any, sequence?: number): void Inherited from default.setPositionFromJSON Parameters positionJSON: any optionalsequence: number Returns void toJSON toJSON(forPlayer?: boolean): { default: boolean; index: undefined | number; value: any } Inherited from default.toJSON Parameters forPlayer: boolean = true Returns { default: boolean; index: undefined | number; value: any } default: boolean index: undefined | number value: any toString toString(): string Overrides default.toString Returns string validateNoDuplicate validateNoDuplicate(): void Inherited from default.validateNoDuplicate Returns void","keywords":"","version":"Next"},{"title":"action","type":0,"sectionRef":"#","url":"/api/function/action","content":"action Callable action&lt;P&gt;(definition: { condition?: boolean | () =&gt; boolean; message?: string | (...args: Argument&lt;P&gt;[]) =&gt; string; prompt: string }): default&lt;P, []&gt; Type parameters P: default Parameters definition: { condition?: boolean | () =&gt; boolean; message?: string | (...args: Argument&lt;P&gt;[]) =&gt; string; prompt: string } Returns default&lt;P, []&gt;","keywords":"","version":"Next"},{"title":"boardDebug","type":0,"sectionRef":"#","url":"/api/function/boardDebug","content":"boardDebug Callable boardDebug(): null | Element Returns null | Element","keywords":"","version":"Next"},{"title":"WhileLoop <P>","type":0,"sectionRef":"#","url":"/api/class/WhileLoop","content":"WhileLoop &lt;P&gt; Hierarchy default&lt;P&gt; WhileLoop Index Constructors constructor Properties blockgamenameparentpositionsequencesteptoptypewhile Methods actionNeededadvanceallStepsbranchJSONcurrentBlockcurrentFlowcurrentLoopflowStepArgsfromJSONgetStepplayplayOneStepprocessMoverepeatresetsetBranchFromJSONsetPositionsetPositionFromJSONtoJSONtoStringvalidateNoDuplicate Constructors constructor new WhileLoop&lt;P&gt;(__namedParameters: { do: FlowDefinition&lt;P&gt;; name?: string; while: () =&gt; boolean }): default&lt;P&gt; Overrides default.constructor Type parameters P: default Parameters __namedParameters: { do: FlowDefinition&lt;P&gt;; name?: string; while: () =&gt; boolean } Returns default&lt;P&gt; Properties block block: FlowDefinition&lt;P&gt; Overrides default.block game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game optionalname name?: string Inherited from default.name optionalparent parent?: default&lt;P&gt; Inherited from default.parent position position: WhileLoopPosition Overrides default.position optionalsequence sequence?: number Inherited from default.sequence optionalstep step?: FlowStep&lt;P&gt; Inherited from default.step top top: default&lt;P&gt; Inherited from default.top type type: sequence | loop | foreach | switch-case | action = 'loop' Overrides default.type while while: () =&gt; boolean Type declaration (): boolean Returns boolean Methods actionNeeded actionNeeded(): undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Inherited from default.actionNeeded Returns undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } advance advance(): ok | complete Overrides default.advance Returns ok | complete allSteps allSteps(): FlowDefinition&lt;P&gt; Overrides default.allSteps Returns FlowDefinition&lt;P&gt; branchJSON branchJSON(forPlayer?: boolean): FlowBranchJSON[] Inherited from default.branchJSON Parameters forPlayer: boolean = true Returns FlowBranchJSON[] currentBlock currentBlock(): undefined | FlowDefinition&lt;P&gt; Overrides default.currentBlock Returns undefined | FlowDefinition&lt;P&gt; currentFlow currentFlow(): default&lt;P&gt; Inherited from default.currentFlow Returns default&lt;P&gt; currentLoop currentLoop(): undefined | (default&lt;P&gt; &amp; { repeat: Function }) Inherited from default.currentLoop Returns undefined | (default&lt;P&gt; &amp; { repeat: Function }) flowStepArgs flowStepArgs(): Record&lt;string, any&gt; Inherited from default.flowStepArgs Returns Record&lt;string, any&gt; fromJSON fromJSON(json: any): undefined | Position&lt;P&gt; Inherited from default.fromJSON Parameters json: any Returns undefined | Position&lt;P&gt; getStep getStep(name: string): undefined | default&lt;P&gt; Inherited from default.getStep Parameters name: string Returns undefined | default&lt;P&gt; play play(): void | string[] Inherited from default.play Returns void | string[] playOneStep playOneStep(): string[] | ok | complete Inherited from default.playOneStep advance flow one step and return ‘complete’ if complete, ‘ok’ if can continue, ‘skip’/‘repeat’ to skip/repeat the current loop. return a list of actions if now waiting for player input. override for self-contained flows that do not have subflows. Returns string[] | ok | complete processMove processMove(move: ActionStepPosition&lt;P&gt;): undefined | string Inherited from default.processMove Parameters move: ActionStepPosition&lt;P&gt; Returns undefined | string repeat repeat(): ok | complete Returns ok | complete reset reset(): void Overrides default.reset Returns void setBranchFromJSON setBranchFromJSON(branch: FlowBranchJSON[]): void Inherited from default.setBranchFromJSON Parameters branch: FlowBranchJSON[] Returns void setPosition setPosition(position: any, sequence?: number, reset?: boolean): void Inherited from default.setPosition Parameters position: any optionalsequence: number reset: boolean = true Returns void setPositionFromJSON setPositionFromJSON(positionJSON: any, sequence?: number): void Inherited from default.setPositionFromJSON Parameters positionJSON: any optionalsequence: number Returns void toJSON toJSON(forPlayer?: boolean): any Inherited from default.toJSON Parameters forPlayer: boolean = true Returns any toString toString(): string Overrides default.toString Returns string validateNoDuplicate validateNoDuplicate(): void Inherited from default.validateNoDuplicate Returns void","keywords":"","version":"Next"},{"title":"choiceSetting","type":0,"sectionRef":"#","url":"/api/function/choiceSetting","content":"choiceSetting Callable choiceSetting(label: string, choices: Record&lt;string, string&gt;): (__namedParameters: SetupComponentProps) =&gt; Element Parameters label: string choices: Record&lt;string, string&gt; Returns (__namedParameters: SetupComponentProps) =&gt; Element (__namedParameters: SetupComponentProps): Element Parameters __namedParameters: SetupComponentProps Returns Element","keywords":"","version":"Next"},{"title":"combinations","type":0,"sectionRef":"#","url":"/api/function/combinations","content":"combinations Callable combinations&lt;T&gt;(set: T[], min: number, max: number): T[][] Type parameters T: unknown Parameters set: T[] min: number max: number Returns T[][]","keywords":"","version":"Next"},{"title":"deserialize","type":0,"sectionRef":"#","url":"/api/function/deserialize","content":"deserialize Callable deserialize&lt;P&gt;(arg: any, game: default&lt;P, default&lt;P&gt;&gt;): Serializable&lt;P&gt; Type parameters P: default Parameters arg: any game: default&lt;P, default&lt;P&gt;&gt; Returns Serializable&lt;P&gt;","keywords":"","version":"Next"},{"title":"createInteface","type":0,"sectionRef":"#","url":"/api/function/createInteface","content":"createInteface Callable createInteface(setup: SetupFunction&lt;default, default&lt;default&gt;&gt;): GameInterface&lt;default&gt; Parameters setup: SetupFunction&lt;default, default&lt;default&gt;&gt; Returns GameInterface&lt;default&gt;","keywords":"","version":"Next"},{"title":"cellSizeForArea","type":0,"sectionRef":"#","url":"/api/function/cellSizeForArea","content":"cellSizeForArea Callable cellSizeForArea(rows: number, columns: number, area: { height: number; width: number }, gap?: Vector, offsetColumn?: Vector, offsetRow?: Vector): { height: number; width: number } Parameters rows: number columns: number area: { height: number; width: number } optionalgap: Vector optionaloffsetColumn: Vector optionaloffsetRow: Vector Returns { height: number; width: number } height: number width: number","keywords":"","version":"Next"},{"title":"debug","type":0,"sectionRef":"#","url":"/api/function/debug","content":"debug Callable debug(): null | Element Returns null | Element","keywords":"","version":"Next"},{"title":"deserializeArg","type":0,"sectionRef":"#","url":"/api/function/deserializeArg","content":"deserializeArg Callable deserializeArg&lt;P&gt;(arg: SerializedArg, game: default&lt;P, default&lt;P&gt;&gt;): Argument&lt;P&gt; Type parameters P: default Parameters arg: SerializedArg game: default&lt;P, default&lt;P&gt;&gt; Returns Argument&lt;P&gt;","keywords":"","version":"Next"},{"title":"deserializeObject","type":0,"sectionRef":"#","url":"/api/function/deserializeObject","content":"deserializeObject Callable deserializeObject&lt;P&gt;(obj: Record&lt;string, any&gt;, game: default&lt;P, default&lt;P&gt;&gt;): {} Type parameters P: default Parameters obj: Record&lt;string, any&gt; game: default&lt;P, default&lt;P&gt;&gt; Returns {} [k string]: T","keywords":"","version":"Next"},{"title":"eachPlayer","type":0,"sectionRef":"#","url":"/api/function/eachPlayer","content":"eachPlayer Callable eachPlayer&lt;P&gt;(eachPlayerConfig: { continueUntil?: (p: P) =&gt; boolean; do: FlowDefinition&lt;P&gt;; name: string; nextPlayer?: (p: P) =&gt; P; startingPlayer?: P | (a: Record&lt;any, any&gt;) =&gt; P; turns?: number }): default&lt;P&gt; Type parameters P: default Parameters eachPlayerConfig: { continueUntil?: (p: P) =&gt; boolean; do: FlowDefinition&lt;P&gt;; name: string; nextPlayer?: (p: P) =&gt; P; startingPlayer?: P | (a: Record&lt;any, any&gt;) =&gt; P; turns?: number } Returns default&lt;P&gt;","keywords":"","version":"Next"},{"title":"flowDebug","type":0,"sectionRef":"#","url":"/api/function/flowDebug","content":"flowDebug Callable flowDebug(__namedParameters: { flow: default&lt;default&gt; }): Element Parameters __namedParameters: { flow: default&lt;default&gt; } Returns Element","keywords":"","version":"Next"},{"title":"escapeArgument","type":0,"sectionRef":"#","url":"/api/function/escapeArgument","content":"escapeArgument Callable escapeArgument&lt;P&gt;(arg: Argument&lt;P&gt;): string Type parameters P: default Parameters arg: Argument&lt;P&gt; Returns string","keywords":"","version":"Next"},{"title":"SwitchCase <P, T>","type":0,"sectionRef":"#","url":"/api/class/SwitchCase","content":"SwitchCase &lt;P, T&gt; Hierarchy default&lt;P&gt; SwitchCase If Index Constructors constructor Properties blockcasesdefaultgamenameparentpositionsequencestepswitchtoptype Methods actionNeededadvanceallStepsbranchJSONcurrentBlockcurrentFlowcurrentLoopflowStepArgsfromJSONgetStepplayplayOneStepprocessMoveresetsetBranchFromJSONsetPositionsetPositionFromJSONtoJSONtoStringvalidateNoDuplicate Constructors constructor new SwitchCase&lt;P, T&gt;(__namedParameters: { cases: SwitchCaseCases&lt;P, T&gt;; default?: FlowDefinition&lt;P&gt;; name?: string; switch: T | (r: Record&lt;string, any&gt;) =&gt; T }): default&lt;P, T&gt; Overrides default.constructor Type parameters P: defaultT: undefined | null | string | number | boolean | default | default&lt;P&gt; | Serializable&lt;P&gt;[] | {} Parameters __namedParameters: { cases: SwitchCaseCases&lt;P, T&gt;; default?: FlowDefinition&lt;P&gt;; name?: string; switch: T | (r: Record&lt;string, any&gt;) =&gt; T } Returns default&lt;P, T&gt; Properties optionalblock block?: FlowDefinition&lt;P&gt; Inherited from default.block cases cases: SwitchCaseCases&lt;P, T&gt; optionaldefault default?: FlowDefinition&lt;P&gt; game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game optionalname name?: string Inherited from default.name optionalparent parent?: default&lt;P&gt; Inherited from default.parent position position: SwitchCasePostion&lt;T&gt; Overrides default.position optionalsequence sequence?: number Inherited from default.sequence optionalstep step?: FlowStep&lt;P&gt; Inherited from default.step switch switch: T | (a?: Record&lt;string, any&gt;) =&gt; T top top: default&lt;P&gt; Inherited from default.top type type: sequence | loop | foreach | switch-case | action = &quot;switch-case&quot; Overrides default.type Methods actionNeeded actionNeeded(): undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } Inherited from default.actionNeeded Returns undefined | { actions: string[]; expand: boolean; prompt?: string; skipIfOnlyOne: boolean; step?: string } advance advance(): ok | complete Inherited from default.advance Returns ok | complete allSteps allSteps(): FlowDefinition&lt;P&gt; Overrides default.allSteps Returns FlowDefinition&lt;P&gt; branchJSON branchJSON(forPlayer?: boolean): FlowBranchJSON[] Inherited from default.branchJSON Parameters forPlayer: boolean = true Returns FlowBranchJSON[] currentBlock currentBlock(): undefined | FlowDefinition&lt;P&gt; Overrides default.currentBlock Returns undefined | FlowDefinition&lt;P&gt; currentFlow currentFlow(): default&lt;P&gt; Inherited from default.currentFlow Returns default&lt;P&gt; currentLoop currentLoop(): undefined | (default&lt;P&gt; &amp; { repeat: Function }) Inherited from default.currentLoop Returns undefined | (default&lt;P&gt; &amp; { repeat: Function }) flowStepArgs flowStepArgs(): Record&lt;string, any&gt; Inherited from default.flowStepArgs Returns Record&lt;string, any&gt; fromJSON fromJSON(position: any): { default: any; index: any; value: Serializable&lt;P&gt; } Overrides default.fromJSON Parameters position: any Returns { default: any; index: any; value: Serializable&lt;P&gt; } default: any index: any value: Serializable&lt;P&gt; getStep getStep(name: string): undefined | default&lt;P&gt; Inherited from default.getStep Parameters name: string Returns undefined | default&lt;P&gt; play play(): void | string[] Inherited from default.play Returns void | string[] playOneStep playOneStep(): string[] | ok | complete Inherited from default.playOneStep advance flow one step and return ‘complete’ if complete, ‘ok’ if can continue, ‘skip’/‘repeat’ to skip/repeat the current loop. return a list of actions if now waiting for player input. override for self-contained flows that do not have subflows. Returns string[] | ok | complete processMove processMove(move: ActionStepPosition&lt;P&gt;): undefined | string Inherited from default.processMove Parameters move: ActionStepPosition&lt;P&gt; Returns undefined | string reset reset(): void Overrides default.reset Returns void setBranchFromJSON setBranchFromJSON(branch: FlowBranchJSON[]): void Inherited from default.setBranchFromJSON Parameters branch: FlowBranchJSON[] Returns void setPosition setPosition(position: any, sequence?: number, reset?: boolean): void Inherited from default.setPosition Parameters position: any optionalsequence: number reset: boolean = true Returns void setPositionFromJSON setPositionFromJSON(positionJSON: any, sequence?: number): void Inherited from default.setPositionFromJSON Parameters positionJSON: any optionalsequence: number Returns void toJSON toJSON(forPlayer?: boolean): { default: boolean; index: undefined | number; value: any } Overrides default.toJSON Parameters forPlayer: boolean = true Returns { default: boolean; index: undefined | number; value: any } default: boolean index: undefined | number value: any toString toString(): string Overrides default.toString Returns string validateNoDuplicate validateNoDuplicate(): void Inherited from default.validateNoDuplicate Returns void","keywords":"","version":"Next"},{"title":"deserializeSingleArg","type":0,"sectionRef":"#","url":"/api/function/deserializeSingleArg","content":"deserializeSingleArg Callable deserializeSingleArg&lt;P&gt;(arg: SerializedSingleArg, game: default&lt;P, default&lt;P&gt;&gt;): SingleArgument&lt;P&gt; Type parameters P: default Parameters arg: SerializedSingleArg game: default&lt;P, default&lt;P&gt;&gt; Returns SingleArgument&lt;P&gt;","keywords":"","version":"Next"},{"title":"forLoop","type":0,"sectionRef":"#","url":"/api/function/forLoop","content":"forLoop Callable forLoop&lt;P, T&gt;(forLoopConfig: { do: FlowDefinition&lt;P&gt;; initial: T | (a: Record&lt;string, any&gt;) =&gt; T; name: string; next: (a: T) =&gt; T; while: (a: T) =&gt; boolean }): default&lt;P, T&gt; Type parameters P: defaultT = Serializable&lt;P&gt; Parameters forLoopConfig: { do: FlowDefinition&lt;P&gt;; initial: T | (a: Record&lt;string, any&gt;) =&gt; T; name: string; next: (a: T) =&gt; T; while: (a: T) =&gt; boolean } Returns default&lt;P, T&gt;","keywords":"","version":"Next"},{"title":"forEach","type":0,"sectionRef":"#","url":"/api/function/forEach","content":"forEach Callable forEach&lt;P, T&gt;(forEachConfig: { collection: (a: Record&lt;string, any&gt;) =&gt; T[] | T[]; do: FlowDefinition&lt;P&gt;; name: string }): default&lt;P, T&gt; Type parameters P: defaultT: undefined | null | string | number | boolean | default | default&lt;P&gt; | Serializable&lt;P&gt;[] | {} Parameters forEachConfig: { collection: (a: Record&lt;string, any&gt;) =&gt; T[] | T[]; do: FlowDefinition&lt;P&gt;; name: string } Returns default&lt;P, T&gt;","keywords":"","version":"Next"},{"title":"gameStore","type":0,"sectionRef":"#","url":"/api/function/gameStore","content":"gameStore Callable gameStore(): GameStoregameStore&lt;U&gt;(selector: (state: GameStore) =&gt; U, equalityFn?: (a: U, b: U) =&gt; boolean): U Returns GameStore","keywords":"","version":"Next"},{"title":"Element","type":0,"sectionRef":"#","url":"/api/function/Element","content":"Element Callable Element(__namedParameters: { element: default&lt;default&gt;; json: ElementJSON; onMouseLeave?: () =&gt; void; onSelectElement: (element: default&lt;default&gt;, moves: PendingMove&lt;default&gt;[]) =&gt; void; selected: default&lt;default&gt;[] }): undefined | null | Element Parameters __namedParameters: { element: default&lt;default&gt;; json: ElementJSON; onMouseLeave?: () =&gt; void; onSelectElement: (element: default&lt;default&gt;, moves: PendingMove&lt;default&gt;[]) =&gt; void; selected: default&lt;default&gt;[] } Returns undefined | null | Element","keywords":"","version":"Next"},{"title":"imports","type":0,"sectionRef":"#","url":"/api/function/imports","content":"imports Callable imports&lt;P&gt;(): { Board: Object; Piece: Object; Space: Object; action: Function } Type parameters P: default Returns { Board: Object; Piece: Object; Space: Object; action: Function } Board: Object Piece: Object Space: Object action: Function","keywords":"","version":"Next"},{"title":"humanizeArg","type":0,"sectionRef":"#","url":"/api/function/humanizeArg","content":"humanizeArg Callable humanizeArg&lt;P&gt;(arg: Argument&lt;P&gt;): string Type parameters P: default Parameters arg: Argument&lt;P&gt; Returns string","keywords":"","version":"Next"},{"title":"isA","type":0,"sectionRef":"#","url":"/api/function/isA","content":"isA Callable isA&lt;P&gt;(el: default&lt;P&gt;, el2: { name: string }): boolean Type parameters P: default Parameters el: default&lt;P&gt; el2: { name: string } Returns boolean","keywords":"","version":"Next"},{"title":"numberSetting","type":0,"sectionRef":"#","url":"/api/function/numberSetting","content":"numberSetting Callable numberSetting(label: string, min: number, max: number): (__namedParameters: SetupComponentProps) =&gt; Element Parameters label: string min: number max: number Returns (__namedParameters: SetupComponentProps) =&gt; Element (__namedParameters: SetupComponentProps): Element Parameters __namedParameters: SetupComponentProps Returns Element","keywords":"","version":"Next"},{"title":"Board <P>","type":0,"sectionRef":"#","url":"/api/class/Board","content":"Board &lt;P&gt; Hierarchy default&lt;P&gt; Board Index Constructors constructor Properties _ctx_eventHandlers_t_ui_visibleboardbottombottomNgamenamepileplayertoptopNhiddenAttributesisGameElement Accessors mine Methods _otherFinderabsoluteTransformaddEventHandleradjacentToallallJSONappearanceapplyLayoutsatBranchatIDbranchclosestconnectTocontainercreatecreateChildrenFromJSONcreateElementcreateManydisableDefaultAppearancedistanceTodoneMovingfirstfirstNfromJSONgetAreagetLayoutItemsgetMoveTransformhashiddenhideFromhideFromAllisDescendantOfisEmptyisSpaceisVisibleisVisibleTolastlastNlayoutlayoutActionlayoutSteponEnterothersownerrelativeTransformToBoardsetIdsetOrdershowOnlyToshowToshowToAllshufflesortBytoJSONtriggerEventwithinDistancehide Constructors constructor new Board&lt;P&gt;(...classes: ElementClass&lt;P, default&lt;P&gt;&gt;[]): default&lt;P&gt; Overrides default.constructor Type parameters P: default Parameters rest...classes: ElementClass&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P&gt; Properties _ctx _ctx: ElementContext&lt;P&gt; Inherited from default._ctx _eventHandlers _eventHandlers: { enter: ElementEventHandler&lt;P, default&lt;P&gt;&gt;[] } = ... Inherited from default._eventHandlers Type declaration enter: ElementEventHandler&lt;P, default&lt;P&gt;&gt;[] _t _t: { children: default&lt;P, default&lt;P&gt;&gt;; graph?: UndirectedGraph&lt;Attributes, Attributes, Attributes&gt;; id: number; order?: normal | stacking; parent?: default&lt;P&gt;; was?: string } Inherited from default._t Type declaration children: default&lt;P, default&lt;P&gt;&gt; optionalgraph?: UndirectedGraph&lt;Attributes, Attributes, Attributes&gt; id: number optionalorder?: normal | stacking optionalparent?: default&lt;P&gt; optionalwas?: string _ui _ui: ElementUI&lt;P, default&lt;P&gt;&gt; &amp; { disabledDefaultAppearance?: boolean; frame?: Box; previousStyles: Record&lt;any, Box&gt;; stepLayouts: Record&lt;string, ActionLayout&lt;P&gt;&gt; } Overrides default._ui UI optional_visible _visible?: { default: boolean; except?: number[] } Inherited from default._visible Type declaration default: boolean optionalexcept?: number[] board board: default&lt;P&gt; Inherited from default.board bottom bottom: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Inherited from default.bottom Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F bottomN bottomN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Inherited from default.bottomN Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game name name: string Inherited from default.name pile pile: default&lt;P&gt; optionalplayer player?: P Inherited from default.player top top: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Inherited from default.top Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F topN topN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Inherited from default.topN Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; statichiddenAttributes hiddenAttributes: string[] = [] Inherited from default.hiddenAttributes staticisGameElement isGameElement: boolean = true Inherited from default.isGameElement Accessors mine get mine(): boolean Inherited from Space.mine Returns boolean Methods _otherFinder _otherFinder&lt;T&gt;(finders: ElementFinder&lt;P, T&gt;[]): ElementFinder&lt;P, default&lt;P&gt;&gt; Inherited from default._otherFinder Type parameters T: default&lt;P&gt; Parameters finders: ElementFinder&lt;P, T&gt;[] Returns ElementFinder&lt;P, default&lt;P&gt;&gt; absoluteTransform absoluteTransform(): Box Inherited from default.absoluteTransform Returns Box addEventHandler addEventHandler&lt;T&gt;(type: enter, handler: ElementEventHandler&lt;P, T&gt;): void Inherited from default.addEventHandler Type parameters T: default&lt;P&gt; Parameters type: enter handler: ElementEventHandler&lt;P, T&gt; Returns void adjacentTo adjacentTo(el: default&lt;P&gt;): boolean Inherited from default.adjacentTo Parameters el: default&lt;P&gt; Returns boolean all all&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;all&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.all Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; allJSON allJSON(seenBy?: number): ElementJSON[] Parameters optionalseenBy: number Returns ElementJSON[] appearance appearance(appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: default&lt;P&gt;) =&gt; null | Element; zoomable?: boolean | (el: default&lt;P&gt;) =&gt; boolean }): void Inherited from default.appearance Parameters appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: default&lt;P&gt;) =&gt; null | Element; zoomable?: boolean | (el: default&lt;P&gt;) =&gt; boolean } Returns void applyLayouts applyLayouts(force?: boolean): void Overrides default.applyLayouts Parameters force: boolean = false Returns void atBranch atBranch(b: string): default&lt;P&gt; Inherited from default.atBranch Parameters b: string Returns default&lt;P&gt; atID atID(id: number): undefined | default&lt;P&gt; Inherited from default.atID Parameters id: number Returns undefined | default&lt;P&gt; branch branch(): string Inherited from default.branch Returns string closest closest&lt;F&gt;(className?: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;closest&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Inherited from default.closest Type parameters F: default&lt;P&gt; Parameters optionalclassName: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; connectTo connectTo(el: default&lt;P&gt;, cost?: number): default&lt;P&gt; Inherited from default.connectTo Parameters el: default&lt;P&gt; cost: number = 1 Returns default&lt;P&gt; container container&lt;T&gt;(className?: ElementClass&lt;P, T&gt;): undefined | T Inherited from default.container Type parameters T: default&lt;P&gt; Parameters optionalclassName: ElementClass&lt;P, T&gt; Returns undefined | T create create&lt;T&gt;(className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): T Inherited from default.create Type parameters T: default&lt;P&gt; Parameters className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns T createChildrenFromJSON createChildrenFromJSON(childrenJSON: ElementJSON[], branch: string): void Inherited from default.createChildrenFromJSON Parameters childrenJSON: ElementJSON[] branch: string Returns void createElement createElement&lt;T&gt;(className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): T Inherited from default.createElement Type parameters T: default&lt;P&gt; Parameters className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns T createMany createMany&lt;T&gt;(n: number, className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): default&lt;P, T&gt; Inherited from default.createMany Type parameters T: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns default&lt;P, T&gt; disableDefaultAppearance disableDefaultAppearance(): void Returns void distanceTo distanceTo(el: default&lt;P&gt;): undefined | number Inherited from default.distanceTo Parameters el: default&lt;P&gt; Returns undefined | number doneMoving doneMoving(): void Inherited from default.doneMoving Returns void first first&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;first&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Inherited from default.first Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; firstN firstN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;firstN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.firstN Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; fromJSON fromJSON(boardJSON: ElementJSON[]): void Parameters boardJSON: ElementJSON[] Returns void getArea getArea(attributes: { area?: Box; margin?: number | { bottom: number; left: number; right: number; top: number } }): Box Inherited from default.getArea Parameters attributes: { area?: Box; margin?: number | { bottom: number; left: number; right: number; top: number } } Returns Box getLayoutItems getLayoutItems(): default&lt;P&gt;[][] Inherited from default.getLayoutItems Returns default&lt;P&gt;[][] getMoveTransform getMoveTransform(): undefined | { scaleX: number; scaleY: number; translateX: number; translateY: number } Inherited from default.getMoveTransform Returns undefined | { scaleX: number; scaleY: number; translateX: number; translateY: number } has has&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): booleanhas&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): boolean Inherited from default.has Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns boolean hidden hidden(): default&lt;P&gt; Inherited from default.hidden Returns default&lt;P&gt; hideFrom hideFrom(...player: number[]): void Inherited from default.hideFrom Parameters rest...player: number[] Returns void hideFromAll hideFromAll(): void Inherited from default.hideFromAll Returns void isDescendantOf isDescendantOf(el: default&lt;P&gt;): boolean Inherited from default.isDescendantOf Parameters el: default&lt;P&gt; Returns boolean isEmpty isEmpty(): boolean Inherited from default.isEmpty Returns boolean isSpace isSpace(): boolean Inherited from default.isSpace Returns boolean isVisible isVisible(): boolean Inherited from default.isVisible Returns boolean isVisibleTo isVisibleTo(p: number): boolean Inherited from default.isVisibleTo Parameters p: number Returns boolean last last&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;last&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Inherited from default.last Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; lastN lastN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;lastN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.lastN Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; layout layout(applyTo: string | default&lt;P&gt; | ElementClass&lt;P, default&lt;P&gt;&gt; | default&lt;P, default&lt;P&gt;&gt;, attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt;): void Inherited from default.layout Parameters applyTo: string | default&lt;P&gt; | ElementClass&lt;P, default&lt;P&gt;&gt; | default&lt;P, default&lt;P&gt;&gt; attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt; Returns void layoutAction layoutAction(action: string, attributes: ActionLayout&lt;P&gt;): void Parameters action: string attributes: ActionLayout&lt;P&gt; Returns void layoutStep layoutStep(step: string, attributes: ActionLayout&lt;P&gt;): void Parameters step: string attributes: ActionLayout&lt;P&gt; Returns void onEnter onEnter&lt;T&gt;(type: ElementClass&lt;P, T&gt;, callback: (el: T) =&gt; void): void Inherited from default.onEnter Type parameters T: default&lt;P&gt; Parameters type: ElementClass&lt;P, T&gt; callback: (el: T) =&gt; void Returns void others others&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;others&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.others Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; owner owner(): undefined | P Inherited from default.owner Returns undefined | P relativeTransformToBoard relativeTransformToBoard(): Box Inherited from default.relativeTransformToBoard Returns Box setId setId(id?: number): void Inherited from default.setId Parameters optionalid: number Returns void setOrder setOrder(order: undefined | normal | stacking): void Inherited from default.setOrder Parameters order: undefined | normal | stacking Returns void showOnlyTo showOnlyTo(player: number): void Inherited from default.showOnlyTo Parameters player: number Returns void showTo showTo(...player: number[]): void Inherited from default.showTo Parameters rest...player: number[] Returns void showToAll showToAll(): void Inherited from default.showToAll Returns void shuffle shuffle(): void Inherited from default.shuffle Returns void sortBy sortBy&lt;E&gt;(key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[], direction?: asc | desc): default&lt;P, default&lt;P&gt;&gt; Inherited from default.sortBy Type parameters E: default&lt;P&gt; Parameters key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[] optionaldirection: asc | desc Returns default&lt;P, default&lt;P&gt;&gt; toJSON toJSON(seenBy?: number): ElementJSON Inherited from default.toJSON Parameters optionalseenBy: number Returns ElementJSON triggerEvent triggerEvent(event: enter, entering: default&lt;P&gt;): void Inherited from default.triggerEvent Parameters event: enter entering: default&lt;P&gt; Returns void withinDistance withinDistance(distance: number): default&lt;P, default&lt;P&gt;&gt; Inherited from default.withinDistance Parameters distance: number Returns default&lt;P, default&lt;P&gt;&gt; statichide hide&lt;P, T&gt;(this: ElementClass&lt;P, T&gt;, ...attrs: (string &amp; keyof T)[]): void Inherited from default.hide Type parameters P: defaultT: default&lt;P&gt; Parameters this: ElementClass&lt;P, T&gt; rest...attrs: (string &amp; keyof T)[] Returns void","keywords":"","version":"Next"},{"title":"playerActions","type":0,"sectionRef":"#","url":"/api/function/playerActions","content":"playerActions Callable playerActions&lt;P&gt;(playerActionsConfig: { actions: Record&lt;string, FlowDefinition&lt;P&gt;&gt;; expand?: boolean; name?: string; player?: (args: Record&lt;string, any&gt;) =&gt; P; prompt?: string; skipIfOnlyOne?: boolean }): default&lt;P&gt; Type parameters P: default Parameters playerActionsConfig: { actions: Record&lt;string, FlowDefinition&lt;P&gt;&gt;; expand?: boolean; name?: string; player?: (args: Record&lt;string, any&gt;) =&gt; P; prompt?: string; skipIfOnlyOne?: boolean } Returns default&lt;P&gt;","keywords":"","version":"Next"},{"title":"main","type":0,"sectionRef":"#","url":"/api/function/main","content":"main Callable main(__namedParameters: { maxPlayers: number; minPlayers: number; setup: SetupFunction&lt;default, default&lt;default&gt;&gt;; userID: string }): Element Parameters __namedParameters: { maxPlayers: number; minPlayers: number; setup: SetupFunction&lt;default, default&lt;default&gt;&gt;; userID: string } Returns Element","keywords":"","version":"Next"},{"title":"range","type":0,"sectionRef":"#","url":"/api/function/range","content":"range Callable range(min: number, max: number, step?: number): any[] Parameters min: number max: number step: number = 1 Returns any[]","keywords":"","version":"Next"},{"title":"PlayerControls","type":0,"sectionRef":"#","url":"/api/function/PlayerControls","content":"PlayerControls Callable PlayerControls(__namedParameters: { disambiguateElement?: { element: default&lt;default&gt;; moves: PendingMove&lt;default&gt;[] }; onSubmit: (move?: PendingMove&lt;default&gt;, value?: Argument&lt;default&gt;) =&gt; void }): null | Element Parameters __namedParameters: { disambiguateElement?: { element: default&lt;default&gt;; moves: PendingMove&lt;default&gt;[] }; onSubmit: (move?: PendingMove&lt;default&gt;, value?: Argument&lt;default&gt;) =&gt; void } Returns null | Element","keywords":"","version":"Next"},{"title":"game","type":0,"sectionRef":"#","url":"/api/function/game","content":"game Callable game&lt;P, B&gt;(__namedParameters: { actions: (game: default&lt;P, B&gt;, board: B) =&gt; Record&lt;string, (player: P) =&gt; default&lt;P, Argument&lt;P&gt;[]&gt;&gt;; boardClass: ElementClass&lt;P, B&gt;; elementClasses?: ElementClass&lt;P, default&lt;P&gt;&gt;[]; playerClass: new (a: PlayerAttributes&lt;P&gt;) =&gt; P; setupBoard?: (game: default&lt;P, B&gt;, board: B) =&gt; any; setupFlow: (game: default&lt;P, B&gt;, board: B) =&gt; default&lt;P&gt;; setupLayout?: (board: B, aspectRatio: number) =&gt; void }): SetupFunction&lt;P, B&gt; Type parameters P: defaultB: default&lt;P&gt; Parameters __namedParameters: { actions: (game: default&lt;P, B&gt;, board: B) =&gt; Record&lt;string, (player: P) =&gt; default&lt;P, Argument&lt;P&gt;[]&gt;&gt;; boardClass: ElementClass&lt;P, B&gt;; elementClasses?: ElementClass&lt;P, default&lt;P&gt;&gt;[]; playerClass: new (a: PlayerAttributes&lt;P&gt;) =&gt; P; setupBoard?: (game: default&lt;P, B&gt;, board: B) =&gt; any; setupFlow: (game: default&lt;P, B&gt;, board: B) =&gt; default&lt;P&gt;; setupLayout?: (board: B, aspectRatio: number) =&gt; void } Returns SetupFunction&lt;P, B&gt;","keywords":"","version":"Next"},{"title":"serialize","type":0,"sectionRef":"#","url":"/api/function/serialize","content":"serialize Callable serialize&lt;P&gt;(arg: Serializable&lt;P&gt;, forPlayer?: boolean): any Type parameters P: default Parameters arg: Serializable&lt;P&gt; forPlayer: boolean = true Returns any","keywords":"","version":"Next"},{"title":"serializeArg","type":0,"sectionRef":"#","url":"/api/function/serializeArg","content":"serializeArg Callable serializeArg&lt;P&gt;(arg: Argument&lt;P&gt;, forPlayer?: boolean): SerializedArg Type parameters P: default Parameters arg: Argument&lt;P&gt; forPlayer: boolean = true Returns SerializedArg","keywords":"","version":"Next"},{"title":"ifElse","type":0,"sectionRef":"#","url":"/api/function/ifElse","content":"ifElse Callable ifElse&lt;P&gt;(ifElseConfig: { do: FlowDefinition&lt;P&gt;; else?: FlowDefinition&lt;P&gt;; if: (r: Record&lt;any, any&gt;) =&gt; boolean; name?: string }): default&lt;P&gt; Type parameters P: default Parameters ifElseConfig: { do: FlowDefinition&lt;P&gt;; else?: FlowDefinition&lt;P&gt;; if: (r: Record&lt;any, any&gt;) =&gt; boolean; name?: string } Returns default&lt;P&gt;","keywords":"","version":"Next"},{"title":"scale","type":0,"sectionRef":"#","url":"/api/function/scale","content":"scale Callable scale(a: Box, v: Vector): Box Parameters a: Box v: Vector Returns Box","keywords":"","version":"Next"},{"title":"serializeObject","type":0,"sectionRef":"#","url":"/api/function/serializeObject","content":"serializeObject Callable serializeObject(obj: Record&lt;string, any&gt;, forPlayer?: boolean): {} Parameters obj: Record&lt;string, any&gt; forPlayer: boolean = true Returns {} [k string]: T","keywords":"","version":"Next"},{"title":"serializeSingleArg","type":0,"sectionRef":"#","url":"/api/function/serializeSingleArg","content":"serializeSingleArg Callable serializeSingleArg&lt;P&gt;(arg: SingleArgument&lt;P&gt;, forPlayer?: boolean): SerializedSingleArg Type parameters P: default Parameters arg: SingleArgument&lt;P&gt; forPlayer: boolean = true Returns SerializedSingleArg","keywords":"","version":"Next"},{"title":"Space <P>","type":0,"sectionRef":"#","url":"/api/class/Space","content":"Space &lt;P&gt; Hierarchy default&lt;P&gt; Space Board Index Constructors constructor Properties _ctx_eventHandlers_t_ui_visibleboardbottombottomNgamenameplayertoptopNhiddenAttributesisGameElement Accessors mine Methods _otherFinderabsoluteTransformaddEventHandleradjacentToallappearanceapplyLayoutsatBranchatIDbranchclosestconnectTocontainercreatecreateChildrenFromJSONcreateElementcreateManydistanceTodoneMovingfirstfirstNgetAreagetLayoutItemsgetMoveTransformhashiddenhideFromhideFromAllisDescendantOfisEmptyisSpaceisVisibleisVisibleTolastlastNlayoutonEnterothersownerrelativeTransformToBoardsetIdsetOrdershowOnlyToshowToshowToAllshufflesortBytoJSONtriggerEventwithinDistancehide Constructors constructor new Space&lt;P&gt;(ctx: Partial&lt;ElementContext&lt;P&gt;&gt;): default&lt;P&gt; Inherited from default.constructor Type parameters P: default Parameters ctx: Partial&lt;ElementContext&lt;P&gt;&gt; Returns default&lt;P&gt; Properties _ctx _ctx: ElementContext&lt;P&gt; Inherited from default._ctx _eventHandlers _eventHandlers: { enter: ElementEventHandler&lt;P, default&lt;P&gt;&gt;[] } = ... Type declaration enter: ElementEventHandler&lt;P, default&lt;P&gt;&gt;[] _t _t: { children: default&lt;P, default&lt;P&gt;&gt;; graph?: UndirectedGraph&lt;Attributes, Attributes, Attributes&gt;; id: number; order?: normal | stacking; parent?: default&lt;P&gt;; was?: string } Inherited from default._t Type declaration children: default&lt;P, default&lt;P&gt;&gt; optionalgraph?: UndirectedGraph&lt;Attributes, Attributes, Attributes&gt; id: number optionalorder?: normal | stacking optionalparent?: default&lt;P&gt; optionalwas?: string _ui _ui: ElementUI&lt;P, default&lt;P&gt;&gt; = ... Inherited from default._ui UI optional_visible _visible?: { default: boolean; except?: number[] } Inherited from default._visible Type declaration default: boolean optionalexcept?: number[] board board: default&lt;P&gt; Inherited from default.board bottom bottom: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Inherited from default.bottom Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F bottomN bottomN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Inherited from default.bottomN Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game name name: string Inherited from default.name optionalplayer player?: P Inherited from default.player top top: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Inherited from default.top Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F topN topN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Inherited from default.topN Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; statichiddenAttributes hiddenAttributes: string[] = [] Inherited from default.hiddenAttributes staticisGameElement isGameElement: boolean = true Inherited from default.isGameElement Accessors mine get mine(): boolean Inherited from GameElement.mine Returns boolean Methods _otherFinder _otherFinder&lt;T&gt;(finders: ElementFinder&lt;P, T&gt;[]): ElementFinder&lt;P, default&lt;P&gt;&gt; Overrides default._otherFinder Type parameters T: default&lt;P&gt; Parameters finders: ElementFinder&lt;P, T&gt;[] Returns ElementFinder&lt;P, default&lt;P&gt;&gt; absoluteTransform absoluteTransform(): Box Inherited from default.absoluteTransform Returns Box addEventHandler addEventHandler&lt;T&gt;(type: enter, handler: ElementEventHandler&lt;P, T&gt;): void Type parameters T: default&lt;P&gt; Parameters type: enter handler: ElementEventHandler&lt;P, T&gt; Returns void adjacentTo adjacentTo(el: default&lt;P&gt;): boolean Parameters el: default&lt;P&gt; Returns boolean all all&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;all&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.all Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; appearance appearance(appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: default&lt;P&gt;) =&gt; null | Element; zoomable?: boolean | (el: default&lt;P&gt;) =&gt; boolean }): void Inherited from default.appearance Parameters appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: default&lt;P&gt;) =&gt; null | Element; zoomable?: boolean | (el: default&lt;P&gt;) =&gt; boolean } Returns void applyLayouts applyLayouts(force?: boolean): void Inherited from default.applyLayouts Parameters force: boolean = false Returns void atBranch atBranch(b: string): default&lt;P&gt; Inherited from default.atBranch Parameters b: string Returns default&lt;P&gt; atID atID(id: number): undefined | default&lt;P&gt; Inherited from default.atID Parameters id: number Returns undefined | default&lt;P&gt; branch branch(): string Inherited from default.branch Returns string closest closest&lt;F&gt;(className?: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;closest&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters optionalclassName: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; connectTo connectTo(el: default&lt;P&gt;, cost?: number): default&lt;P&gt; Parameters el: default&lt;P&gt; cost: number = 1 Returns default&lt;P&gt; container container&lt;T&gt;(className?: ElementClass&lt;P, T&gt;): undefined | T Inherited from default.container Type parameters T: default&lt;P&gt; Parameters optionalclassName: ElementClass&lt;P, T&gt; Returns undefined | T create create&lt;T&gt;(className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): T Inherited from default.create Type parameters T: default&lt;P&gt; Parameters className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns T createChildrenFromJSON createChildrenFromJSON(childrenJSON: ElementJSON[], branch: string): void Inherited from default.createChildrenFromJSON Parameters childrenJSON: ElementJSON[] branch: string Returns void createElement createElement&lt;T&gt;(className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): T Overrides default.createElement Type parameters T: default&lt;P&gt; Parameters className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns T createMany createMany&lt;T&gt;(n: number, className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): default&lt;P, T&gt; Inherited from default.createMany Type parameters T: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns default&lt;P, T&gt; distanceTo distanceTo(el: default&lt;P&gt;): undefined | number Parameters el: default&lt;P&gt; Returns undefined | number doneMoving doneMoving(): void Inherited from default.doneMoving Returns void first first&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;first&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Inherited from default.first Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; firstN firstN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;firstN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.firstN Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; getArea getArea(attributes: { area?: Box; margin?: number | { bottom: number; left: number; right: number; top: number } }): Box Inherited from default.getArea Parameters attributes: { area?: Box; margin?: number | { bottom: number; left: number; right: number; top: number } } Returns Box getLayoutItems getLayoutItems(): default&lt;P&gt;[][] Inherited from default.getLayoutItems Returns default&lt;P&gt;[][] getMoveTransform getMoveTransform(): undefined | { scaleX: number; scaleY: number; translateX: number; translateY: number } Inherited from default.getMoveTransform Returns undefined | { scaleX: number; scaleY: number; translateX: number; translateY: number } has has&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): booleanhas&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): boolean Inherited from default.has Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns boolean hidden hidden(): default&lt;P&gt; Inherited from default.hidden Returns default&lt;P&gt; hideFrom hideFrom(...player: number[]): void Inherited from default.hideFrom Parameters rest...player: number[] Returns void hideFromAll hideFromAll(): void Inherited from default.hideFromAll Returns void isDescendantOf isDescendantOf(el: default&lt;P&gt;): boolean Inherited from default.isDescendantOf Parameters el: default&lt;P&gt; Returns boolean isEmpty isEmpty(): boolean Inherited from default.isEmpty Returns boolean isSpace isSpace(): boolean Returns boolean isVisible isVisible(): boolean Inherited from default.isVisible Returns boolean isVisibleTo isVisibleTo(p: number): boolean Inherited from default.isVisibleTo Parameters p: number Returns boolean last last&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;last&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Inherited from default.last Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; lastN lastN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;lastN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.lastN Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; layout layout(applyTo: string | default&lt;P&gt; | default&lt;P, default&lt;P&gt;&gt; | ElementClass&lt;P, default&lt;P&gt;&gt;, attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt;): void Inherited from default.layout Parameters applyTo: string | default&lt;P&gt; | default&lt;P, default&lt;P&gt;&gt; | ElementClass&lt;P, default&lt;P&gt;&gt; attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt; Returns void onEnter onEnter&lt;T&gt;(type: ElementClass&lt;P, T&gt;, callback: (el: T) =&gt; void): void Type parameters T: default&lt;P&gt; Parameters type: ElementClass&lt;P, T&gt; callback: (el: T) =&gt; void Returns void others others&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;others&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.others Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; owner owner(): undefined | P Inherited from default.owner Returns undefined | P relativeTransformToBoard relativeTransformToBoard(): Box Inherited from default.relativeTransformToBoard Returns Box setId setId(id?: number): void Inherited from default.setId Parameters optionalid: number Returns void setOrder setOrder(order: undefined | normal | stacking): void Inherited from default.setOrder Parameters order: undefined | normal | stacking Returns void showOnlyTo showOnlyTo(player: number): void Inherited from default.showOnlyTo Parameters player: number Returns void showTo showTo(...player: number[]): void Inherited from default.showTo Parameters rest...player: number[] Returns void showToAll showToAll(): void Inherited from default.showToAll Returns void shuffle shuffle(): void Inherited from default.shuffle Returns void sortBy sortBy&lt;E&gt;(key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[], direction?: asc | desc): default&lt;P, default&lt;P&gt;&gt; Inherited from default.sortBy Type parameters E: default&lt;P&gt; Parameters key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[] optionaldirection: asc | desc Returns default&lt;P, default&lt;P&gt;&gt; toJSON toJSON(seenBy?: number): ElementJSON Inherited from default.toJSON Parameters optionalseenBy: number Returns ElementJSON triggerEvent triggerEvent(event: enter, entering: default&lt;P&gt;): void Parameters event: enter entering: default&lt;P&gt; Returns void withinDistance withinDistance(distance: number): default&lt;P, default&lt;P&gt;&gt; Parameters distance: number Returns default&lt;P, default&lt;P&gt;&gt; statichide hide&lt;P, T&gt;(this: ElementClass&lt;P, T&gt;, ...attrs: (string &amp; keyof T)[]): void Inherited from default.hide Type parameters P: defaultT: default&lt;P&gt; Parameters this: ElementClass&lt;P, T&gt; rest...attrs: (string &amp; keyof T)[] Returns void","keywords":"","version":"Next"},{"title":"skip","type":0,"sectionRef":"#","url":"/api/function/skip","content":"skip Callable skip(): never Returns never","keywords":"","version":"Next"},{"title":"setup","type":0,"sectionRef":"#","url":"/api/function/setup","content":"setup Callable setup(__namedParameters: { maxPlayers: number; minPlayers: number; onStart: () =&gt; void; onUpdatePlayers: (operations: PlayerOperation[]) =&gt; void; onUpdateSettings: (s: GameSettings) =&gt; void; players: UserPlayer[]; settings?: GameSettings; users: User[] }): Element Parameters __namedParameters: { maxPlayers: number; minPlayers: number; onStart: () =&gt; void; onUpdatePlayers: (operations: PlayerOperation[]) =&gt; void; onUpdateSettings: (s: GameSettings) =&gt; void; players: UserPlayer[]; settings?: GameSettings; users: User[] } Returns Element","keywords":"","version":"Next"},{"title":"shift","type":0,"sectionRef":"#","url":"/api/function/shift","content":"shift Callable shift(a: Box, v: Vector): Box Parameters a: Box v: Vector Returns Box","keywords":"","version":"Next"},{"title":"shuffleArray","type":0,"sectionRef":"#","url":"/api/function/shuffleArray","content":"shuffleArray Callable shuffleArray(array: any[], random: () =&gt; number): void Parameters array: any[] random: () =&gt; number Returns void","keywords":"","version":"Next"},{"title":"switchCase","type":0,"sectionRef":"#","url":"/api/function/switchCase","content":"switchCase Callable switchCase&lt;P, T&gt;(switchCaseConfig: { cases: SwitchCaseCases&lt;P, T&gt;; default?: FlowDefinition&lt;P&gt;; name?: string; switch: T | (r: Record&lt;string, any&gt;) =&gt; T }): default&lt;P, T&gt; Type parameters P: defaultT: undefined | null | string | number | boolean | default | default&lt;P&gt; | Serializable&lt;P&gt;[] | {} Parameters switchCaseConfig: { cases: SwitchCaseCases&lt;P, T&gt;; default?: FlowDefinition&lt;P&gt;; name?: string; switch: T | (r: Record&lt;string, any&gt;) =&gt; T } Returns default&lt;P, T&gt;","keywords":"","version":"Next"},{"title":"repeat","type":0,"sectionRef":"#","url":"/api/function/repeat","content":"repeat Callable repeat(): never Returns never","keywords":"","version":"Next"},{"title":"Seating","type":0,"sectionRef":"#","url":"/api/function/Seating","content":"Seating Callable Seating(__namedParameters: { maxPlayers: number; minPlayers: number; onUpdatePlayers: (operations: PlayerOperation[]) =&gt; void; players: UserPlayer[]; users: User[] }): Element Parameters __namedParameters: { maxPlayers: number; minPlayers: number; onUpdatePlayers: (operations: PlayerOperation[]) =&gt; void; players: UserPlayer[]; users: User[] } Returns Element","keywords":"","version":"Next"},{"title":"translate","type":0,"sectionRef":"#","url":"/api/function/translate","content":"translate Callable translate(original: Box, transform: Box): Box Parameters original: Box transform: Box Returns Box","keywords":"","version":"Next"},{"title":"times","type":0,"sectionRef":"#","url":"/api/function/times","content":"times Callable times(n: number, fn: (n: number) =&gt; any): any[] Parameters n: number fn: (n: number) =&gt; any Returns any[]","keywords":"","version":"Next"},{"title":"toggleSetting","type":0,"sectionRef":"#","url":"/api/function/toggleSetting","content":"toggleSetting Callable toggleSetting(label: string): (__namedParameters: SetupComponentProps) =&gt; Element Parameters label: string Returns (__namedParameters: SetupComponentProps) =&gt; Element (__namedParameters: SetupComponentProps): Element Parameters __namedParameters: SetupComponentProps Returns Element","keywords":"","version":"Next"},{"title":"textSetting","type":0,"sectionRef":"#","url":"/api/function/textSetting","content":"textSetting Callable textSetting(label: string): (__namedParameters: SetupComponentProps) =&gt; Element Parameters label: string Returns (__namedParameters: SetupComponentProps) =&gt; Element (__namedParameters: SetupComponentProps): Element Parameters __namedParameters: SetupComponentProps Returns Element","keywords":"","version":"Next"},{"title":"ui","type":0,"sectionRef":"#","url":"/api/function/ui","content":"ui Callable ui&lt;P&gt;(setup: SetupFunction&lt;P, default&lt;P&gt;&gt;, options: UIOptions): void Type parameters P: default Parameters setup: SetupFunction&lt;P, default&lt;P&gt;&gt; options: UIOptions Returns void","keywords":"","version":"Next"},{"title":"union","type":0,"sectionRef":"#","url":"/api/function/union","content":"union Callable union&lt;P&gt;(...queries: (undefined | default&lt;P&gt; | default&lt;P, default&lt;P&gt;&gt;)[]): ElementCollection&lt;P, GameElement&lt;P&gt;&gt; Type parameters P: default Parameters rest...queries: (undefined | default&lt;P&gt; | default&lt;P, default&lt;P&gt;&gt;)[] Returns ElementCollection&lt;P, GameElement&lt;P&gt;&gt;","keywords":"","version":"Next"},{"title":"Define your flow","type":0,"sectionRef":"#","url":"/game/define-flow","content":"Define your flow Some stuff about flow","keywords":"","version":"Next"},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"/game/actions","content":"","keywords":"","version":"Next"},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"/game/actions#build-your-site","content":"Build your site for production: npm run build  The static files are generated in the build folder. ","version":"Next","tagName":"h2"},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"/game/actions#deploy-your-site-1","content":"Test your production build locally: npm run serve  The build folder is now served at http://localhost:3000/. You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). ","version":"Next","tagName":"h2"},{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"/game/create-a-blog-post","content":"","keywords":"","version":"Next"},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"/game/create-a-blog-post#create-your-first-post","content":"Create a file at blog/2021-02-28-greetings.md: blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much you like.  A new blog post is now available at http://localhost:3000/blog/greetings. ","version":"Next","tagName":"h2"},{"title":"Rules","type":0,"sectionRef":"#","url":"/introduction/rules","content":"Rules blah blah","keywords":"","version":"Next"},{"title":"GameElement <P>","type":0,"sectionRef":"#","url":"/api/class/GameElement","content":"GameElement &lt;P&gt; Hierarchy GameElement PieceSpace Index Constructors constructor Properties _ctx_t_ui_visibleboardbottombottomNgamenameplayertoptopNhiddenAttributesisGameElement Accessors mine Methods _otherFinderabsoluteTransformallappearanceapplyLayoutsatBranchatIDbranchcontainercreatecreateChildrenFromJSONcreateElementcreateManydoneMovingfirstfirstNgetAreagetLayoutItemsgetMoveTransformhashiddenhideFromhideFromAllisDescendantOfisEmptyisVisibleisVisibleTolastlastNlayoutothersownerrelativeTransformToBoardsetIdsetOrdershowOnlyToshowToshowToAllshufflesortBytoJSONhide Constructors constructor new GameElement&lt;P&gt;(ctx: Partial&lt;ElementContext&lt;P&gt;&gt;): default&lt;P&gt; Type parameters P: default Parameters ctx: Partial&lt;ElementContext&lt;P&gt;&gt; Returns default&lt;P&gt; Properties _ctx _ctx: ElementContext&lt;P&gt; _t _t: { children: default&lt;P, default&lt;P&gt;&gt;; graph?: UndirectedGraph&lt;Attributes, Attributes, Attributes&gt;; id: number; order?: normal | stacking; parent?: default&lt;P&gt;; was?: string } Type declaration children: default&lt;P, default&lt;P&gt;&gt; optionalgraph?: UndirectedGraph&lt;Attributes, Attributes, Attributes&gt; id: number optionalorder?: normal | stacking optionalparent?: default&lt;P&gt; optionalwas?: string _ui _ui: ElementUI&lt;P, default&lt;P&gt;&gt; = ... UI optional_visible _visible?: { default: boolean; except?: number[] } Type declaration default: boolean optionalexcept?: number[] board board: default&lt;P&gt; bottom bottom: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F bottomN bottomN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; game game: default&lt;P, default&lt;P&gt;&gt; name name: string optionalplayer player?: P top top: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F topN topN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; statichiddenAttributes hiddenAttributes: string[] = [] staticisGameElement isGameElement: boolean = true Accessors mine get mine(): boolean Returns boolean Methods _otherFinder _otherFinder&lt;T&gt;(finders: ElementFinder&lt;P, T&gt;[]): ElementFinder&lt;P, default&lt;P&gt;&gt; Type parameters T: default&lt;P&gt; Parameters finders: ElementFinder&lt;P, T&gt;[] Returns ElementFinder&lt;P, default&lt;P&gt;&gt; absoluteTransform absoluteTransform(): Box Returns Box all all&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;all&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; appearance appearance(appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: default&lt;P&gt;) =&gt; null | Element; zoomable?: boolean | (el: default&lt;P&gt;) =&gt; boolean }): void Parameters appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: default&lt;P&gt;) =&gt; null | Element; zoomable?: boolean | (el: default&lt;P&gt;) =&gt; boolean } Returns void applyLayouts applyLayouts(force?: boolean): void Parameters force: boolean = false Returns void atBranch atBranch(b: string): default&lt;P&gt; Parameters b: string Returns default&lt;P&gt; atID atID(id: number): undefined | default&lt;P&gt; Parameters id: number Returns undefined | default&lt;P&gt; branch branch(): string Returns string container container&lt;T&gt;(className?: ElementClass&lt;P, T&gt;): undefined | T Type parameters T: default&lt;P&gt; Parameters optionalclassName: ElementClass&lt;P, T&gt; Returns undefined | T create create&lt;T&gt;(className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): T Type parameters T: default&lt;P&gt; Parameters className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns T createChildrenFromJSON createChildrenFromJSON(childrenJSON: ElementJSON[], branch: string): void Parameters childrenJSON: ElementJSON[] branch: string Returns void createElement createElement&lt;T&gt;(className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): T Type parameters T: default&lt;P&gt; Parameters className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns T createMany createMany&lt;T&gt;(n: number, className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): default&lt;P, T&gt; Type parameters T: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns default&lt;P, T&gt; doneMoving doneMoving(): void Returns void first first&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;first&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; firstN firstN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;firstN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; getArea getArea(attributes: { area?: Box; margin?: number | { bottom: number; left: number; right: number; top: number } }): Box Parameters attributes: { area?: Box; margin?: number | { bottom: number; left: number; right: number; top: number } } Returns Box getLayoutItems getLayoutItems(): default&lt;P&gt;[][] Returns default&lt;P&gt;[][] getMoveTransform getMoveTransform(): undefined | { scaleX: number; scaleY: number; translateX: number; translateY: number } Returns undefined | { scaleX: number; scaleY: number; translateX: number; translateY: number } has has&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): booleanhas&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): boolean Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns boolean hidden hidden(): default&lt;P&gt; Returns default&lt;P&gt; hideFrom hideFrom(...player: number[]): void Parameters rest...player: number[] Returns void hideFromAll hideFromAll(): void Returns void isDescendantOf isDescendantOf(el: default&lt;P&gt;): boolean Parameters el: default&lt;P&gt; Returns boolean isEmpty isEmpty(): boolean Returns boolean isVisible isVisible(): boolean Returns boolean isVisibleTo isVisibleTo(p: number): boolean Parameters p: number Returns boolean last last&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;last&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; lastN lastN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;lastN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; layout layout(applyTo: string | default&lt;P&gt; | default&lt;P, default&lt;P&gt;&gt; | ElementClass&lt;P, default&lt;P&gt;&gt;, attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt;): void Parameters applyTo: string | default&lt;P&gt; | default&lt;P, default&lt;P&gt;&gt; | ElementClass&lt;P, default&lt;P&gt;&gt; attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt; Returns void others others&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;others&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; owner owner(): undefined | P Returns undefined | P relativeTransformToBoard relativeTransformToBoard(): Box Returns Box setId setId(id?: number): void Parameters optionalid: number Returns void setOrder setOrder(order: undefined | normal | stacking): void Parameters order: undefined | normal | stacking Returns void showOnlyTo showOnlyTo(player: number): void Parameters player: number Returns void showTo showTo(...player: number[]): void Parameters rest...player: number[] Returns void showToAll showToAll(): void Returns void shuffle shuffle(): void Returns void sortBy sortBy&lt;E&gt;(key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[], direction?: asc | desc): default&lt;P, default&lt;P&gt;&gt; Type parameters E: default&lt;P&gt; Parameters key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[] optionaldirection: asc | desc Returns default&lt;P, default&lt;P&gt;&gt; toJSON toJSON(seenBy?: number): ElementJSON Parameters optionalseenBy: number Returns ElementJSON statichide hide&lt;P, T&gt;(this: ElementClass&lt;P, T&gt;, ...attrs: (string &amp; keyof T)[]): void Type parameters P: defaultT: default&lt;P&gt; Parameters this: ElementClass&lt;P, T&gt; rest...attrs: (string &amp; keyof T)[] Returns void","keywords":"","version":"Next"},{"title":"Piece <P>","type":0,"sectionRef":"#","url":"/api/class/Piece","content":"Piece &lt;P&gt; Hierarchy default&lt;P&gt; Piece Index Constructors constructor Properties _ctx_t_ui_visibleboardbottombottomNgamenameplayertoptopNhiddenAttributesisGameElement Accessors mine Methods _otherFinderabsoluteTransformallappearanceapplyLayoutsatBranchatIDbranchcontainercreatecreateChildrenFromJSONcreateElementcreateManydoneMovingfirstfirstNgetAreagetLayoutItemsgetMoveTransformhashiddenhideFromhideFromAllisDescendantOfisEmptyisVisibleisVisibleTolastlastNlayoutothersownerputIntorelativeTransformToBoardremovesetIdsetOrdershowOnlyToshowToshowToAllshufflesortBytoJSONhide Constructors constructor new Piece&lt;P&gt;(ctx: Partial&lt;ElementContext&lt;P&gt;&gt;): default&lt;P&gt; Inherited from default.constructor Type parameters P: default Parameters ctx: Partial&lt;ElementContext&lt;P&gt;&gt; Returns default&lt;P&gt; Properties _ctx _ctx: ElementContext&lt;P&gt; Inherited from default._ctx _t _t: { children: default&lt;P, default&lt;P&gt;&gt;; graph?: UndirectedGraph&lt;Attributes, Attributes, Attributes&gt;; id: number; order?: normal | stacking; parent?: default&lt;P&gt;; was?: string } Inherited from default._t Type declaration children: default&lt;P, default&lt;P&gt;&gt; optionalgraph?: UndirectedGraph&lt;Attributes, Attributes, Attributes&gt; id: number optionalorder?: normal | stacking optionalparent?: default&lt;P&gt; optionalwas?: string _ui _ui: ElementUI&lt;P, default&lt;P&gt;&gt; = ... Inherited from default._ui UI optional_visible _visible?: { default: boolean; except?: number[] } Inherited from default._visible Type declaration default: boolean optionalexcept?: number[] board board: default&lt;P&gt; Inherited from default.board bottom bottom: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Inherited from default.bottom Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F bottomN bottomN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Inherited from default.bottomN Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; game game: default&lt;P, default&lt;P&gt;&gt; Inherited from default.game name name: string Inherited from default.name optionalplayer player?: P Inherited from default.player top top: { &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;; &lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F } Inherited from default.top Type declaration &lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; Type parameters F: default&lt;P&gt; Parameters className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns undefined | F topN topN: { &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;; &lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; } Inherited from default.topN Type declaration &lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; Type parameters F: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, F&gt; rest...finders: ElementFinder&lt;P, F&gt;[] Returns default&lt;P, F&gt; statichiddenAttributes hiddenAttributes: string[] = [] Inherited from default.hiddenAttributes staticisGameElement isGameElement: boolean = true Inherited from default.isGameElement Accessors mine get mine(): boolean Inherited from GameElement.mine Returns boolean Methods _otherFinder _otherFinder&lt;T&gt;(finders: ElementFinder&lt;P, T&gt;[]): ElementFinder&lt;P, default&lt;P&gt;&gt; Inherited from default._otherFinder Type parameters T: default&lt;P&gt; Parameters finders: ElementFinder&lt;P, T&gt;[] Returns ElementFinder&lt;P, default&lt;P&gt;&gt; absoluteTransform absoluteTransform(): Box Inherited from default.absoluteTransform Returns Box all all&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;all&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.all Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; appearance appearance(appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: default&lt;P&gt;) =&gt; null | Element; zoomable?: boolean | (el: default&lt;P&gt;) =&gt; boolean }): void Inherited from default.appearance Parameters appearance: { aspectRatio?: number; className?: string; connections?: { color?: string; fill?: string; label?: (arg: any) =&gt; null | Element; labelScale?: number; style?: string; thickness?: number }; render?: false | (el: default&lt;P&gt;) =&gt; null | Element; zoomable?: boolean | (el: default&lt;P&gt;) =&gt; boolean } Returns void applyLayouts applyLayouts(force?: boolean): void Inherited from default.applyLayouts Parameters force: boolean = false Returns void atBranch atBranch(b: string): default&lt;P&gt; Inherited from default.atBranch Parameters b: string Returns default&lt;P&gt; atID atID(id: number): undefined | default&lt;P&gt; Inherited from default.atID Parameters id: number Returns undefined | default&lt;P&gt; branch branch(): string Inherited from default.branch Returns string container container&lt;T&gt;(className?: ElementClass&lt;P, T&gt;): undefined | T Inherited from default.container Type parameters T: default&lt;P&gt; Parameters optionalclassName: ElementClass&lt;P, T&gt; Returns undefined | T create create&lt;T&gt;(className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): T Inherited from default.create Type parameters T: default&lt;P&gt; Parameters className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns T createChildrenFromJSON createChildrenFromJSON(childrenJSON: ElementJSON[], branch: string): void Inherited from default.createChildrenFromJSON Parameters childrenJSON: ElementJSON[] branch: string Returns void createElement createElement&lt;T&gt;(className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): T Inherited from default.createElement Type parameters T: default&lt;P&gt; Parameters className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns T createMany createMany&lt;T&gt;(n: number, className: ElementClass&lt;P, T&gt;, name: string, attrs?: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt;): default&lt;P, T&gt; Inherited from default.createMany Type parameters T: default&lt;P&gt; Parameters n: number className: ElementClass&lt;P, T&gt; name: string optionalattrs: Partial&lt;Pick&lt;T, name | player | { [ K in string | number | symbol ]: K extends keyof default&lt;P&gt; ? never : T[K] extends (...a: any[]) =&gt; any ? never : K }[keyof T]&gt;&gt; Returns default&lt;P, T&gt; doneMoving doneMoving(): void Inherited from default.doneMoving Returns void first first&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;first&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Inherited from default.first Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; firstN firstN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;firstN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.firstN Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; getArea getArea(attributes: { area?: Box; margin?: number | { bottom: number; left: number; right: number; top: number } }): Box Inherited from default.getArea Parameters attributes: { area?: Box; margin?: number | { bottom: number; left: number; right: number; top: number } } Returns Box getLayoutItems getLayoutItems(): default&lt;P&gt;[][] Inherited from default.getLayoutItems Returns default&lt;P&gt;[][] getMoveTransform getMoveTransform(): undefined | { scaleX: number; scaleY: number; translateX: number; translateY: number } Inherited from default.getMoveTransform Returns undefined | { scaleX: number; scaleY: number; translateX: number; translateY: number } has has&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): booleanhas&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): boolean Inherited from default.has Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns boolean hidden hidden(): default&lt;P&gt; Inherited from default.hidden Returns default&lt;P&gt; hideFrom hideFrom(...player: number[]): void Inherited from default.hideFrom Parameters rest...player: number[] Returns void hideFromAll hideFromAll(): void Inherited from default.hideFromAll Returns void isDescendantOf isDescendantOf(el: default&lt;P&gt;): boolean Inherited from default.isDescendantOf Parameters el: default&lt;P&gt; Returns boolean isEmpty isEmpty(): boolean Inherited from default.isEmpty Returns boolean isVisible isVisible(): boolean Inherited from default.isVisible Returns boolean isVisibleTo isVisibleTo(p: number): boolean Inherited from default.isVisibleTo Parameters p: number Returns boolean last last&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): undefined | default&lt;P&gt;last&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): undefined | F Inherited from default.last Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns undefined | default&lt;P&gt; lastN lastN&lt;F&gt;(n: number, className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;lastN&lt;F&gt;(n: number, className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.lastN Type parameters F: default&lt;P&gt; Parameters n: number className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; layout layout(applyTo: string | default&lt;P&gt; | default&lt;P, default&lt;P&gt;&gt; | ElementClass&lt;P, default&lt;P&gt;&gt;, attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt;): void Inherited from default.layout Parameters applyTo: string | default&lt;P&gt; | default&lt;P, default&lt;P&gt;&gt; | ElementClass&lt;P, default&lt;P&gt;&gt; attributes: Partial&lt;{ alignment: top | bottom | left | right | top left | bottom left | top right | bottom right | center; area?: Box; aspectRatio?: number; columns?: number | { max?: number; min: number } | { max: number; min?: number }; direction: square | ltr | rtl | rtl-btt | ltr-btt | ttb | ttb-rtl | btt | btt-rtl; gap?: number | { x: number; y: number }; haphazardly?: number; limit?: number; margin?: number | { bottom: number; left: number; right: number; top: number }; offsetColumn?: Vector; offsetRow?: Vector; rows?: number | { max?: number; min: number } | { max: number; min?: number }; scaling: fill | fit | none; size?: { height: number; width: number }; slots?: Box[] }&gt; Returns void others others&lt;F&gt;(className: ElementFinder&lt;P, default&lt;P&gt;&gt;, ...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[]): default&lt;P, default&lt;P&gt;&gt;others&lt;F&gt;(className: ElementClass&lt;P, F&gt;, ...finders: ElementFinder&lt;P, F&gt;[]): default&lt;P, F&gt; Inherited from default.others Type parameters F: default&lt;P&gt; Parameters className: ElementFinder&lt;P, default&lt;P&gt;&gt; rest...finders: ElementFinder&lt;P, default&lt;P&gt;&gt;[] Returns default&lt;P, default&lt;P&gt;&gt; owner owner(): undefined | P Inherited from default.owner Returns undefined | P putInto putInto(to: default&lt;P&gt;, options?: { fromBottom?: number; fromTop?: number; position?: number }): void Parameters to: default&lt;P&gt; optionaloptions: { fromBottom?: number; fromTop?: number; position?: number } Returns void relativeTransformToBoard relativeTransformToBoard(): Box Inherited from default.relativeTransformToBoard Returns Box remove remove(): void Returns void setId setId(id?: number): void Inherited from default.setId Parameters optionalid: number Returns void setOrder setOrder(order: undefined | normal | stacking): void Inherited from default.setOrder Parameters order: undefined | normal | stacking Returns void showOnlyTo showOnlyTo(player: number): void Inherited from default.showOnlyTo Parameters player: number Returns void showTo showTo(...player: number[]): void Inherited from default.showTo Parameters rest...player: number[] Returns void showToAll showToAll(): void Inherited from default.showToAll Returns void shuffle shuffle(): void Inherited from default.shuffle Returns void sortBy sortBy&lt;E&gt;(key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[], direction?: asc | desc): default&lt;P, default&lt;P&gt;&gt; Inherited from default.sortBy Type parameters E: default&lt;P&gt; Parameters key: Sorter&lt;E&gt; | Sorter&lt;E&gt;[] optionaldirection: asc | desc Returns default&lt;P, default&lt;P&gt;&gt; toJSON toJSON(seenBy?: number): ElementJSON Inherited from default.toJSON Parameters optionalseenBy: number Returns ElementJSON statichide hide&lt;P, T&gt;(this: ElementClass&lt;P, T&gt;, ...attrs: (string &amp; keyof T)[]): void Inherited from default.hide Type parameters P: defaultT: default&lt;P&gt; Parameters this: ElementClass&lt;P, T&gt; rest...attrs: (string &amp; keyof T)[] Returns void","keywords":"","version":"Next"},{"title":"Interface","type":0,"sectionRef":"#","url":"/introduction/interface","content":"Interface blah blah","keywords":"","version":"Next"},{"title":"whileLoop","type":0,"sectionRef":"#","url":"/api/function/whileLoop","content":"whileLoop Callable whileLoop&lt;P&gt;(whileLoopConfig: { do: FlowDefinition&lt;P&gt;; name?: string; while: () =&gt; boolean }): default&lt;P&gt; Type parameters P: default Parameters whileLoopConfig: { do: FlowDefinition&lt;P&gt;; name?: string; while: () =&gt; boolean } Returns default&lt;P&gt;","keywords":"","version":"Next"},{"title":"Actions","type":0,"sectionRef":"#","url":"/game/create-a-document","content":"Actions ...","keywords":"","version":"Next"},{"title":"Writing Hearts","type":0,"sectionRef":"#","url":"/introduction/writing-hearts","content":"Writing Hearts blah blah","keywords":"","version":"Next"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/interface/manage-docs-versions","content":"","keywords":"","version":"Next"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/interface/manage-docs-versions#create-a-docs-version","content":"Release a version 1.0 of your project: npm run docusaurus docs:version 1.0  The docs folder is copied into versioned_docs/version-1.0 and versions.json is created. Your docs now have 2 versions: 1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs ","version":"Next","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/interface/manage-docs-versions#add-a-version-dropdown","content":"To navigate seamlessly across versions, add a version dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };  The docs version dropdown appears in your navbar:  ","version":"Next","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/interface/manage-docs-versions#update-an-existing-version","content":"It is possible to edit versioned docs in their respective folder: versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/introduction/installation","content":"Installation Create an empty game template, substituing [game-name] with the name of your game. npx @boardzilla/create-game [game-name] Change into your newly created directory using cd [game-name].Run npm run dev to start development.Go to http://localhost:8080 to start developing.","keywords":"","version":"Next"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/interface/translate-your-site","content":"","keywords":"","version":"Next"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/interface/translate-your-site#configure-i18n","content":"Modify docusaurus.config.js to add support for the fr locale: docusaurus.config.js module.exports = { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };  ","version":"Next","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/interface/translate-your-site#translate-a-doc","content":"Copy the docs/intro.md file to the i18n/fr folder: mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md  Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French. ","version":"Next","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/interface/translate-your-site#start-your-localized-site","content":"Start your site on the French locale: npm run start -- --locale fr  Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated. caution In development, you can only use one locale at a same time. ","version":"Next","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/interface/translate-your-site#add-a-locale-dropdown","content":"To navigate seamlessly across languages, add a locale dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };  The locale dropdown now appears in your navbar:  ","version":"Next","tagName":"h2"},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/interface/translate-your-site#build-your-localized-site","content":"Build your site for a specific locale: npm run build -- --locale fr  Or build your site to include all the locales at once: npm run build  ","version":"Next","tagName":"h2"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/testing/testing-your-game","content":"Manage Docs Versions","keywords":"","version":"Next"},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"/game/markdown-features","content":"","keywords":"","version":"Next"},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"/game/markdown-features#front-matter","content":"Markdown documents have metadata at the top called Front Matter: my-doc.md --- id: my-doc-id title: My document title description: My document description slug: /my-custom-url --- ## Markdown heading Markdown text with [links](./hello.md)  ","version":"Next","tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"/game/markdown-features#images","content":"Regular Markdown images are supported. You can use absolute paths to reference images in the static directory (static/img/docusaurus.png): ![Docusaurus logo](/img/docusaurus.png)   You can reference images relative to the current file as well. This is particularly useful to colocate images close to the Markdown files using them: ![Docusaurus logo](./img/docusaurus.png)  ","version":"Next","tagName":"h2"},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"/game/markdown-features#code-blocks","content":"Markdown code blocks are supported with Syntax highlighting. ```jsx title=&quot;src/components/HelloDocusaurus.js&quot; function HelloDocusaurus() { return ( &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt; ) } ```  src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; }  ","version":"Next","tagName":"h2"},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"/game/markdown-features#admonitions","content":"Docusaurus has a special syntax to create admonitions and callouts: :::tip My tip Use this awesome feature option ::: :::danger Take care This action is dangerous :::  My tip Use this awesome feature option Take care This action is dangerous ","version":"Next","tagName":"h2"},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"/game/markdown-features#mdx-and-react-components","content":"MDX can make your documentation more interactive and allows using any React components inside Markdown: export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; !  This is Docusaurus green ! This is Facebook blue ! ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}