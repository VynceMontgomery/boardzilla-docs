"use strict";(self.webpackChunkboardzilla_docs=self.webpackChunkboardzilla_docs||[]).push([[6762],{908:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=a(5893),o=a(1151);const i={sidebar_position:3},s="Layout",l={id:"ui/layout",title:"Layout",description:"A layout is basically just a strategy for how items are visually placed inside",source:"@site/docs/ui/layout.md",sourceDirName:"ui",slug:"/ui/layout",permalink:"/ui/layout",draft:!1,unlisted:!1,editUrl:"https://github.com/boardzilla/boardzilla-docs/tree/main/docs/ui/layout.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Customizing the UI",permalink:"/ui/customizing-ui"},next:{title:"Layout sandbox",permalink:"/ui/layout-sandbox"}},r={},d=[{value:"Layout parameters",id:"layout-parameters",level:2},{value:"Customize Controls",id:"customize-controls",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",div:"div",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"layout",children:"Layout"}),"\n",(0,n.jsx)(t.p,{children:"A layout is basically just a strategy for how items are visually placed inside\nother items. A layout might say that items should be laid out in a row, or a\nstack, or a grid. When many items enter the same space, it might say that they\nshould scale down to fit, should squish together, or that only a certain number\nshould actually be visible."}),"\n",(0,n.jsxs)(t.p,{children:["All layout declarations go in the ",(0,n.jsx)(t.code,{children:"layout"})," of the main\n",(0,n.jsx)(t.a,{href:"../api/modules#render",children:(0,n.jsx)(t.code,{children:"render"})})," function, e.g.:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"  render(setup, {\n    ...\n    layout: (board) => {\n      board.layout('mat', {\n        area: { top: 5, height: 90, left: 5, width: 90 },\n      });\n      ...\n    }\n\n  });\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The Boardzilla layout engine works by applying different layout strategies to\ngame elements on the board. By default each element has a very simple layout\nthat divides up its space equally to hold as many items as it has and fits them\nexactly within the allotted space. This is the layout you see when you start\nbuilding your board. Each layout strategy you apply creates a new invisible grid\nlayer on top in which things can fit. This invisible grid will grow or shrink as\nneeded to fill as much of the area as it can. Layouts are applied by calling\n",(0,n.jsx)(t.a,{href:"../api/classes/GameElement#layout",children:(0,n.jsx)(t.code,{children:"layout"})})," on an element or ",(0,n.jsx)(t.a,{href:"../api/classes/ElementCollection#layout",children:"group of\nelements"}),". When you apply a new layout\nto a space, you declare what element(s), or class of elements, it should apply\nto. Any element that enters this space gets put into one of the layouts\ndepending on whether it applies. If multiple layouts apply, Boardzilla\npriortizes ones that apply more specifically (e.g. a specific element overrides\none that applies to a class of elements). If none apply, it falls through to the\ndefault layout at the very bottom."]}),"\n",(0,n.jsx)(t.p,{children:"Each layout in a space operates completely independantly of the others in that\nspace. E.g. if you have a space that might have both Cards and Tokens in it and\nyou apply one layout to Cards and another to Tokens, each Card and Token in that\nspace will be laid out in accordance with its respective layout rules, but Cards\nwill not affect how Tokens are laid out, and vice versa. They are completely\nfree to overlap each other (with later layouts appearing over top of earlier\nones)."}),"\n",(0,n.jsx)(t.div,{style:{textAlign:"center"},children:(0,n.jsx)(t.img,{src:"/img/layouts.png"})}),"\n",(0,n.jsx)(t.p,{children:"In the example pictured here, two layouts are declared for a space, one for\nCircle elements and one for Rectangle elements. Each declares a different grid\nfor their respective elements. When Circles and Rectangles are both added to the\nspace, they overlap each other without interfering with each others grid. The\nlast one declared (Rectangles) appears on top."}),"\n",(0,n.jsx)(t.h2,{id:"layout-parameters",children:"Layout parameters"}),"\n",(0,n.jsxs)(t.p,{children:["Creating a layout for an area of the board is a series of questions, with\ndifferent ",(0,n.jsx)(t.a,{href:"../api/modules#layoutattributes",children:"parameters"})," used to define each one."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["What part of the area should be used to display its contents? (",(0,n.jsx)(t.code,{children:"area"})," or\n",(0,n.jsx)(t.code,{children:"margin"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["How large should the grid be to accommodate its contents? (",(0,n.jsx)(t.code,{children:"rows"})," and\n",(0,n.jsx)(t.code,{children:"columns"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["How tightly should they be packed? (",(0,n.jsx)(t.code,{children:"gap"})," or ",(0,n.jsx)(t.code,{children:"offsetRow"}),"/",(0,n.jsx)(t.code,{children:"offsetColumn"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["Should they be in a square grid, or something non-orthogonal like a hexagon? (",(0,n.jsx)(t.code,{children:"gap"}),"\nor ",(0,n.jsx)(t.code,{children:"offsetRow"}),"/",(0,n.jsx)(t.code,{children:"offsetColumn"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["How should they fill up their grid as more are added? (",(0,n.jsx)(t.code,{children:"direction"}),",\n",(0,n.jsx)(t.code,{children:"alignment"})," and ",(0,n.jsx)(t.code,{children:"limit"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["How should they expand or squish to fit in the area? (",(0,n.jsx)(t.code,{children:"scaling"})," and ",(0,n.jsx)(t.code,{children:"maxOverlap"}),")"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["How all the parameters interact is somewhat technical. The best way to find what\nyou're looking for is to experiment. A helpful ",(0,n.jsx)(t.a,{href:"layout-sandbox",children:"layout sandbox"})," is provided here\nto let you try different parameters and see the results with different\nelements. Also browsing the sample games to see how their layouts work is a good\nresource. Of course, refer to ",(0,n.jsx)(t.a,{href:"../api/modules#layoutattributes",children:"the\ndocumentation"})," for the technical descriptions."]}),"\n",(0,n.jsxs)(t.admonition,{title:"relative percentages",type:"tip",children:[(0,n.jsxs)(t.p,{children:["Most of the sizing attributes in the ",(0,n.jsx)(t.code,{children:"layout"})," parameters are percentage\nvalues. These are generally percentages of the container element's layout, so e.g."]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"$.deck.layout(Card, {\n  area: { left: 25, top: 25, width: 50, height: 50 }\n});\n"})}),(0,n.jsxs)(t.p,{children:["Would place the ",(0,n.jsx)(t.code,{children:"Card"}),"s in the ",(0,n.jsx)(t.code,{children:"deck"})," space into an inner region that is 50% of\nthe deck's width and height."]})]}),"\n",(0,n.jsxs)(t.p,{children:["Note that the layout code is evaluated every time the board changes, so if\ne.g. you have a layout for the cards in the deck, the supplied ",(0,n.jsx)(t.code,{children:"layout"})," might\nlook like:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"$.deck.layout(Card, {\n  ...\n});\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This will be applied to each ",(0,n.jsx)(t.code,{children:"Card"})," in the ",(0,n.jsx)(t.code,{children:"deck"})," Space, and as cards enter or\nleave the deck, the layout will automatically be re-applied given the new set of\ncards in the deck."]}),"\n",(0,n.jsx)(t.admonition,{title:"layout bounding box",type:"tip",children:(0,n.jsxs)(t.p,{children:["While working on a particular layout declaration, adding a ",(0,n.jsx)(t.code,{children:"showBoundingBox"}),"\nattribute causes the layout's area to visibly appear on screen as a dotted\nbounding box. This is an easy way to visually see if your layout is correct."]})}),"\n",(0,n.jsx)(t.h2,{id:"customize-controls",children:"Customize Controls"}),"\n",(0,n.jsx)(t.p,{children:"The controls (floating boxes with player prompts and inputs) can have their\nlocation customized to be contextual with the action taken. There are two\nmethods for controlling placement of these, depending on whether you want the\nplacement to be specific to an Action or specific to a step in the Flow:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"../api/classes/Board#layoutaction",children:(0,n.jsx)(t.code,{children:"board.layoutAction"})})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"../api/classes/Board#layoutstep",children:(0,n.jsx)(t.code,{children:"board.layoutStep"})})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Both of these apply layout rules to a control by specifying the\n",(0,n.jsx)(t.a,{href:"../game/action",children:(0,n.jsx)(t.code,{children:"Action"})})," or the\n",(0,n.jsx)(t.a,{href:"../game/flow#player-actions",children:(0,n.jsx)(t.code,{children:"playerActions.name"})})," respectively and providing\nparameters to anchor it to the board in a particular location. This is to allow\nyour game to place these in a suitable location of the board that corresponds to\nthe action needed, and does not obscure game elements. See\n",(0,n.jsx)(t.a,{href:"../api/modules#actionlayout",children:(0,n.jsx)(t.code,{children:"ActionLayout"})})," for details."]}),"\n",(0,n.jsxs)(t.p,{children:["The controls can also be targetted with CSS like all Boardzilla elements. The\ncontrols box always have the HTML class ",(0,n.jsx)(t.code,{children:"player-controls"})," applied, and other\nclasses are used for specific elements and actions. See ",(0,n.jsx)(t.a,{href:"css",children:"CSS"})," for details."]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>l,a:()=>s});var n=a(7294);const o={},i=n.createContext(o);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);