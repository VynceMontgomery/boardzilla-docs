"use strict";(self.webpackChunkboardzilla_docs=self.webpackChunkboardzilla_docs||[]).push([[877],{7112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=n(5893),o=n(1151);const a={sidebar_position:2},s="Customizing the UI",r={id:"ui/customizing-ui",title:"Customizing the UI",description:"Boardzilla renders and animates the board on the player's browser according to",source:"@site/docs/ui/customizing-ui.md",sourceDirName:"ui",slug:"/ui/customizing-ui",permalink:"/ui/customizing-ui",draft:!1,unlisted:!1,editUrl:"https://github.com/boardzilla/boardzilla-docs/tree/main/docs/ui/customizing-ui.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Core concepts",permalink:"/ui/core-concepts"},next:{title:"Layout",permalink:"/ui/layout"}},l={},c=[{value:"React",id:"react",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"customizing-the-ui",children:"Customizing the UI"}),"\n",(0,i.jsx)(t.p,{children:"Boardzilla renders and animates the board on the player's browser according to\nthe rules of your game. By default everything appears in a very raw but usable\nformat."}),"\n",(0,i.jsx)(t.p,{children:"You can customize the appearance and layout behaviour of all your game\nelements. In Boardzilla, it is easy to build the UI iteratively. You start with\nthe default raw look. It is possible to develop the entire game using the\ndefault UI, and only start customizing once all the rules are working. In many\nways, the default UI is easier to use during development since when\ntroubleshooting issues, you can safely rule out the UI code and see plainly how\nthe board changes according to your rules."}),"\n",(0,i.jsx)(t.p,{children:"Like editing the rules, you can edit the UI in the devtools while you're in the\nmiddle of playtesting the game, watch your UI changes update in real-time, and\ncontinue to playtest, rewind and replay to see how your changes look."}),"\n",(0,i.jsxs)(t.p,{children:["Inside the game template, open the ",(0,i.jsx)(t.code,{children:"ui/index.tsx"})," file. This contains a\n",(0,i.jsx)(t.a,{href:"../api/modules#render",children:(0,i.jsx)(t.code,{children:"render"})})," function that contains a ",(0,i.jsx)(t.code,{children:"layout"})," block. This\nis the block where you will put all the code discussed in this section."]}),"\n",(0,i.jsx)(t.h2,{id:"react",children:"React"}),"\n",(0,i.jsxs)(t.p,{children:["The UI for Boardzilla is rendered in React. But there is very little React that\nyou need to know to work with the custom UI.  Essentially the only React skill\nthat is needed is to be able to write\n",(0,i.jsx)(t.a,{href:"https://www.w3schools.com/react/react_jsx.asp",children:"JSX"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var i=n(7294);const o={},a=i.createContext(o);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);