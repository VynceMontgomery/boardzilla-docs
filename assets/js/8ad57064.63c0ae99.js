"use strict";(self.webpackChunkboardzilla_docs=self.webpackChunkboardzilla_docs||[]).push([[877],{7112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>u});var o=n(5893),i=n(1151);const a={sidebar_position:2},s="Customizing the UI",r={id:"ui/customizing-ui",title:"Customizing the UI",description:"Boardzilla renders and animates the board on the player's browser according to",source:"@site/docs/ui/customizing-ui.md",sourceDirName:"ui",slug:"/ui/customizing-ui",permalink:"/ui/customizing-ui",draft:!1,unlisted:!1,editUrl:"https://github.com/boardzilla/boardzilla-docs/tree/main/docs/ui/customizing-ui.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Core concepts",permalink:"/ui/core-concepts"},next:{title:"Layout",permalink:"/ui/layout"}},c={},u=[{value:"React",id:"react",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"customizing-the-ui",children:"Customizing the UI"}),"\n",(0,o.jsx)(t.p,{children:"Boardzilla renders and animates the board on the player's browser according to\nthe rules of your game. By default everything appears in a raw but usable\nformat."}),"\n",(0,o.jsx)(t.p,{children:"You can customize the appearance and layout behavior of all your game\nelements. The easiest approach to customizing your UI is to do so iteratively. You can start with\nthe default look during development and then start customizing the UI once all the rules are working.\nThe default UI has been designed to ease development. For instance, as you troubleshooting issues, you\ncan safely rule out the UI code and see plainly how the board changes according\nto your rules."}),"\n",(0,o.jsx)(t.p,{children:"Like editing the rules, you can edit the UI in the devtools while you're in the\nmiddle of playtesting the game, and watch your UI changes update in real-time. You can then\ncontinue to playtest, and rewind or replay to see how your UI looks."}),"\n",(0,o.jsxs)(t.p,{children:["To customize your game's UI, open the ",(0,o.jsx)(t.code,{children:"ui/index.tsx"})," file inside your game. This contains a\n",(0,o.jsx)(t.a,{href:"../api/modules#render",children:(0,o.jsx)(t.code,{children:"render"})})," function that has a named ",(0,o.jsx)(t.code,{children:"layout"})," argument which takes a function. This\nfunction where your layout code will go that is discussed in this section."]}),"\n",(0,o.jsx)(t.h2,{id:"react",children:"React"}),"\n",(0,o.jsxs)(t.p,{children:["The UI for Boardzilla is rendered using React. However, there is very little knowledge of React that\nyou necessary in order to customize the UI. Essentially, the only React knowledge needed is how to write\n",(0,o.jsx)(t.a,{href:"https://www.w3schools.com/react/react_jsx.asp",children:"JSX"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var o=n(7294);const i={},a=o.createContext(i);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);