"use strict";(self.webpackChunkboardzilla_docs=self.webpackChunkboardzilla_docs||[]).push([[306],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},k="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},N=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),k=o(a),N=r,f=k["".concat(p,".").concat(N)]||k[N]||s[N]||i;return a?n.createElement(f,l(l({ref:t},m),{},{components:a})):n.createElement(f,l({ref:t},m))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=N;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[k]="string"==typeof e?e:r,l[1]=d;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},4440:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>d,toc:()=>o});var n=a(7462),r=(a(7294),a(3905));const i={id:"modules",title:"@boardzilla/core",sidebar_label:"Table of Contents",sidebar_position:5,hide_table_of_contents:!0,custom_edit_url:null},l=void 0,d={unversionedId:"api/modules",id:"api/modules",title:"@boardzilla/core",description:"Classes",source:"@site/docs/api/modules.md",sourceDirName:"api",slug:"/api/modules",permalink:"/api/modules",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"modules",title:"@boardzilla/core",sidebar_label:"Table of Contents",sidebar_position:5,hide_table_of_contents:!0,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Space",permalink:"/api/classes/Space"}},p={},o=[{value:"Classes",id:"classes",level:2},{value:"Actions",id:"actions",level:2},{value:"Argument",id:"argument",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"FollowUp",id:"followup",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Type declaration",id:"type-declaration",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"Board",id:"board",level:2},{value:"ElementFinder",id:"elementfinder",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"Sorter",id:"sorter",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"createBoardClasses",id:"createboardclasses",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"Core",id:"core",level:2},{value:"createGame",id:"creategame",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"Flow",id:"flow",level:2},{value:"FlowArguments",id:"flowarguments",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"FlowDefinition",id:"flowdefinition",level:3},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"FlowStep",id:"flowstep",level:3},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"Do",id:"do",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"eachPlayer",id:"eachplayer",level:3},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"everyPlayer",id:"everyplayer",level:3},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"forEach",id:"foreach",level:3},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"forLoop",id:"forloop",level:3},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"ifElse",id:"ifelse",level:3},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"loop",id:"loop",level:3},{value:"Type parameters",id:"type-parameters-13",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"playerActions",id:"playeractions",level:3},{value:"Type parameters",id:"type-parameters-14",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"switchCase",id:"switchcase",level:3},{value:"Type parameters",id:"type-parameters-15",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"union",id:"union",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"whileLoop",id:"whileloop",level:3},{value:"Type parameters",id:"type-parameters-16",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"UI",id:"ui",level:2},{value:"ActionLayout",id:"actionlayout",level:3},{value:"Defined in",id:"defined-in-20",level:4},{value:"Box",id:"box",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"LayoutAttributes",id:"layoutattributes",level:3},{value:"Type parameters",id:"type-parameters-17",level:4},{value:"Type declaration",id:"type-declaration-3",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"Vector",id:"vector",level:3},{value:"Type declaration",id:"type-declaration-4",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"choiceSetting",id:"choicesetting",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Parameters",id:"parameters-12",level:5},{value:"Returns",id:"returns-13",level:5},{value:"Defined in",id:"defined-in-24",level:4},{value:"numberSetting",id:"numbersetting",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Parameters",id:"parameters-14",level:5},{value:"Returns",id:"returns-15",level:5},{value:"Defined in",id:"defined-in-25",level:4},{value:"render",id:"render",level:3},{value:"Type parameters",id:"type-parameters-18",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"textSetting",id:"textsetting",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Parameters",id:"parameters-17",level:5},{value:"Returns",id:"returns-18",level:5},{value:"Defined in",id:"defined-in-27",level:4},{value:"toggleSetting",id:"togglesetting",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Parameters",id:"parameters-19",level:5},{value:"Returns",id:"returns-20",level:5},{value:"Defined in",id:"defined-in-28",level:4}],m={toc:o},k="wrapper";function s(e){let{components:t,...a}=e;return(0,r.kt)(k,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"classes"},"Classes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/Action"},"Action")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/Board"},"Board")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/Die"},"Die")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/ElementCollection"},"ElementCollection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/Game"},"Game")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/GameElement"},"GameElement")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/Piece"},"Piece")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/Player"},"Player")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/PlayerCollection"},"PlayerCollection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/Space"},"Space"))),(0,r.kt)("h2",{id:"actions"},"Actions"),(0,r.kt)("h3",{id:"argument"},"Argument"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Argument"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">",": ",(0,r.kt)("inlineCode",{parentName:"p"},"SingleArgument"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"SingleArgument"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">","[]"),(0,r.kt)("p",null,"An argument that can be added to an ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/Action"},"Action"),". Each value is chosen by\nplayer or in some cases passed from a previous action. Arguments can be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a number"),(0,r.kt)("li",{parentName:"ul"},"a string"),(0,r.kt)("li",{parentName:"ul"},"a boolean"),(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("a",{parentName:"li",href:"/api/classes/GameElement"},"GameElement")),(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("a",{parentName:"li",href:"/api/classes/Player"},"Player")),(0,r.kt)("li",{parentName:"ul"},"an array of one these in the case of a multi-choice selection")),(0,r.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")))))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/action/action.ts#L29"},"boardzilla-core/src/action/action.ts:29")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"followup"},"FollowUp"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"FollowUp"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">",": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"A follow-up action"),(0,r.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")))))),(0,r.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"args?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#argument"},(0,r.kt)("inlineCode",{parentName:"a"},"Argument")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"An object containing arguments to be passed to the follow-up action. This is useful if there are multiple ways to trigger this follow-up that have variations.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"player?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/action/action.ts#L35"},"boardzilla-core/src/action/action.ts:35")),(0,r.kt)("h2",{id:"board"},"Board"),(0,r.kt)("h3",{id:"elementfinder"},"ElementFinder"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"ElementFinder"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",": (",(0,r.kt)("inlineCode",{parentName:"p"},"e"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementAttributes"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"," & ","{"," ",(0,r.kt)("inlineCode",{parentName:"p"},"adjacent?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"empty?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"mine?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"owner?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[",(0,r.kt)("inlineCode",{parentName:"p"},'"player"'),"]"," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"withinDistance?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"  } ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("p",null,"A query filter can be one of 3 different forms:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"string"),": will match elements with this name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"function"),": A function that accept an element as its argument and returns a\nboolean indicating whether it is a match, similar to ",(0,r.kt)("inlineCode",{parentName:"li"},"Array#filter"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"object"),": will match elements whose properties match the provided\nproperties. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"deck.all(Card, {suit: 'H'})")," would match all\n",(0,r.kt)("inlineCode",{parentName:"li"},"Card")," elements in ",(0,r.kt)("inlineCode",{parentName:"li"},"deck")," with a ",(0,r.kt)("inlineCode",{parentName:"li"},"suit")," property equal to ",(0,r.kt)("inlineCode",{parentName:"li"},'"H"'),". There are\nsome special property names allowed here:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"mine"),": true/false whether this element belongs to the player in whose context the query is made"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"empty")," true/false whether this element is empty"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"adjacent")," true/false whether this element is adjacent by a connection to the\nelement on which the query method was\ncalled. E.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"france.other(Country, {adjacent: true})")," will match\n",(0,r.kt)("inlineCode",{parentName:"li"},"Country")," elements that are connected to ",(0,r.kt)("inlineCode",{parentName:"li"},"france")," by ",(0,r.kt)("a",{parentName:"li",href:"/api/classes/Space#connectto"},"Space#connectTo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"withinDistance")," Similar to adjacent but uses the provided number to\ndetermine if a connection is possible between elements whose cost is\nnot greater than the provided value")))),(0,r.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement"},(0,r.kt)("inlineCode",{parentName:"a"},"GameElement"))," = ",(0,r.kt)("inlineCode",{parentName:"td"},"any"))))),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/board/element-collection.ts#L40"},"boardzilla-core/src/board/element-collection.ts:40")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sorter"},"Sorter"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Sorter"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",": keyof ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," ","|"," (",(0,r.kt)("inlineCode",{parentName:"p"},"e"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("p",null,"Either the name of a property of the object that can be lexically sorted, or\na function that will be called with the object to sort and must return a\nlexically sortable value."),(0,r.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/board/element-collection.ts#L15"},"boardzilla-core/src/board/element-collection.ts:15")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"createboardclasses"},"createBoardClasses"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"createBoardClasses"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),">","(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Returns board classes for game with the correct types for board and player."),(0,r.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"B")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Board"},(0,r.kt)("inlineCode",{parentName:"a"},"Board")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Die")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"ctx"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Partial"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"ElementContext"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",">",") => ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Die"},(0,r.kt)("inlineCode",{parentName:"a"},"Die")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Die.isGameElement")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Die.prototype")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/classes/Die"},(0,r.kt)("inlineCode",{parentName:"a"},"Die")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Die.visibleAttributes")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Die.revealWhenHidden")),(0,r.kt)("td",{parentName:"tr",align:"left"},"[object Object]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"GameElement")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"ctx"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Partial"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"ElementContext"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",">",") => ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement"},(0,r.kt)("inlineCode",{parentName:"a"},"GameElement")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"GameElement.isGameElement")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"GameElement.prototype")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement"},(0,r.kt)("inlineCode",{parentName:"a"},"GameElement")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"GameElement.visibleAttributes")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"GameElement.revealWhenHidden")),(0,r.kt)("td",{parentName:"tr",align:"left"},"[object Object]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Piece")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"ctx"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Partial"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"ElementContext"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",">",") => ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Piece"},(0,r.kt)("inlineCode",{parentName:"a"},"Piece")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Piece.isGameElement")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Piece.prototype")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/classes/Piece"},(0,r.kt)("inlineCode",{parentName:"a"},"Piece")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Piece.visibleAttributes")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Piece.revealWhenHidden")),(0,r.kt)("td",{parentName:"tr",align:"left"},"[object Object]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Space")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"ctx"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Partial"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"ElementContext"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",">",") => ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Space"},(0,r.kt)("inlineCode",{parentName:"a"},"Space")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Space.isGameElement")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Space.prototype")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/classes/Space"},(0,r.kt)("inlineCode",{parentName:"a"},"Space")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Space.visibleAttributes")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Space.revealWhenHidden")),(0,r.kt)("td",{parentName:"tr",align:"left"},"[object Object]")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const {Space, Piece, Die} = createBoardClasses<MyGamePlayer, MyGameBoard>();\n")),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/index.ts#L37"},"boardzilla-core/src/index.ts:37")),(0,r.kt)("h2",{id:"core"},"Core"),(0,r.kt)("h3",{id:"creategame"},"createGame"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"createGame"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"playerClass"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"boardClass"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"gameCreator"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"SetupFunction"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),">"),(0,r.kt)("p",null,"Create your game"),(0,r.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"B")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Board"},(0,r.kt)("inlineCode",{parentName:"a"},"Board")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">")))),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"playerClass")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Your player class. This must extend ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},"Player"),". If you do not need any custom Player attributes or behaviour, simply put ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},"Player")," here. This becomes the ",(0,r.kt)("inlineCode",{parentName:"td"},"P")," type generic used throughout Boardzilla.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boardClass")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ElementClass"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Your board class. This must extend ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Board"},"Board"),". If you do not need any custom Board attributes or behaviour, simply put ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Board"},"Board")," here. This becomes the ",(0,r.kt)("inlineCode",{parentName:"td"},"B")," type generic used throughout Boardzilla.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"gameCreator")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"game"),": ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Game"},(0,r.kt)("inlineCode",{parentName:"a"},"Game")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">",") => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SetupFunction"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),">"),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/index.ts#L80"},"boardzilla-core/src/index.ts:80")),(0,r.kt)("h2",{id:"flow"},"Flow"),(0,r.kt)("h3",{id:"flowarguments"},"FlowArguments"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"FlowArguments"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,r.kt)("p",null,"Several flow methods accept an argument of this type. This is an object\ncontaining keys for every flow function that the game is in the middle of\nwhich recorded a value to the current scope. Functions that can add these\nvalues are ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#forloop"},"forLoop"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#foreach"},"forEach"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#switchcase"},"switchCase")," and ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#playeractions"},"playerActions"),". The name given to these functions will be the key used in the\nFlowArguments and its value will be the value of the current loop for loops,\nor the test value for switchCase, or the arguments to the action taken for\nplayerActions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"forLoop({\n  name: 'x', // x is declared here\n  initial: 0,\n  next: x => x + 1,\n  while: x => x < 3,\n  do: forLoop({\n    name: 'y',\n    initial: 0,\n    next: y => y + 1,\n    while: y => y < 2,\n    do: ({ x, y }) => {\n      // x is available here as the value of the outer loop\n      // and y will be the value of the inner loop\n    }\n  })\n})\n")),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/flow.ts#L43"},"boardzilla-core/src/flow/flow.ts:43")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"flowdefinition"},"FlowDefinition"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"FlowDefinition"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">",": ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#flowstep"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowStep")),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"," ","|"," ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#flowstep"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowStep")),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">","[]"),(0,r.kt)("p",null,"FlowDefinition's are provided to the game and to all flow function to provide\nfurther flow logic inside the given flow. Any of the follow qualifies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a plain function that accepts ",(0,r.kt)("a",{parentName:"li",href:"/api/modules#flowarguments"},"FlowArguments")),(0,r.kt)("li",{parentName:"ul"},"one of the ",(0,r.kt)("a",{parentName:"li",href:"/api/classes/Game#flowcommands"},"Game#flowCommands")),(0,r.kt)("li",{parentName:"ul"},"an array of any combination of the above")),(0,r.kt)("h4",{id:"type-parameters-6"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")))))),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/flow.ts#L62"},"boardzilla-core/src/flow/flow.ts:62")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"flowstep"},"FlowStep"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"FlowStep"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">",": ",(0,r.kt)("inlineCode",{parentName:"p"},"Flow"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"," ","|"," (",(0,r.kt)("inlineCode",{parentName:"p"},"args"),": ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#flowarguments"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowArguments")),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"any")),(0,r.kt)("p",null,"FlowStep's are provided to the game and to all flow function to provide\nfurther flow logic inside the given flow. Any of the follow qualifies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a plain function that accepts ",(0,r.kt)("a",{parentName:"li",href:"/api/modules#flowarguments"},"FlowArguments")),(0,r.kt)("li",{parentName:"ul"},"one of the ",(0,r.kt)("a",{parentName:"li",href:"/api/classes/Game#flowcommands"},"Game#flowCommands"))),(0,r.kt)("h4",{id:"type-parameters-7"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")))))),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/flow.ts#L52"},"boardzilla-core/src/flow/flow.ts:52")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"do"},"Do"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,r.kt)("strong",{parentName:"p"},"Do"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Functions for interrupting flows"),(0,r.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"break")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"LoopInterruptControl")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Call ",(0,r.kt)("inlineCode",{parentName:"td"},"Do.break")," from anywhere inside a looping flow (",(0,r.kt)("a",{parentName:"td",href:"/api/modules#loop"},"loop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#whileloop"},"whileLoop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#forloop"},"forLoop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#foreach"},"forEach"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#eachplayer"},"eachPlayer"),") to interrupt the flow, skip the rest of the current loop iteration and exit this loop. This acts like Javascript's ",(0,r.kt)("inlineCode",{parentName:"td"},"break"),". ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))," ",(0,r.kt)("inlineCode",{parentName:"td"},"ts // each player can take a card but if the card is a match, it ends this round eachPlayer({ name: 'player', do: ( playerActions({ actions: [ { name: 'takeCard', do: ({ takeCard }) => if (takeCard.card.isMatch()) Do.break() }, 'pass' ]}), ]}); "))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"continue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"LoopInterruptControl")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Call ",(0,r.kt)("inlineCode",{parentName:"td"},"Do.continue")," from anywhere inside a looping flow (",(0,r.kt)("a",{parentName:"td",href:"/api/modules#loop"},"loop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#whileloop"},"whileLoop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#forloop"},"forLoop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#foreach"},"forEach"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#eachplayer"},"eachPlayer"),") to interrupt the flow, skip the rest of the current loop iteration and repeat the loop with the next value. This acts like Javascript's ",(0,r.kt)("inlineCode",{parentName:"td"},"continue"),". ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))," ",(0,r.kt)("inlineCode",{parentName:"td"},"ts // each player can decide to shout, and if so, may subsequently apologize eachPlayer({ name: 'player', do: [ playerActions({ actions: [ { name: 'shout', do: Do.continue }, // if shouting, skip to the next player 'pass' ]}), playerActions({ actions: [ 'apologize', 'pass' ] }), ]}); "))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"repeat")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"LoopInterruptControl")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Call ",(0,r.kt)("inlineCode",{parentName:"td"},"Do.repeat")," from anywhere inside a looping flow (",(0,r.kt)("a",{parentName:"td",href:"/api/modules#loop"},"loop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#whileloop"},"whileLoop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#forloop"},"forLoop"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#foreach"},"forEach"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#eachplayer"},"eachPlayer"),") to interrupt the flow, skip the rest of the current loop iteration and repeat the current loop with the same value. ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))," ",(0,r.kt)("inlineCode",{parentName:"td"},"ts // each player can shout as many times as they like eachPlayer({ name: 'player', do: ( playerActions({ actions: [ { name: 'shout', do: Do.repeat }, 'pass' ]}), ]}); "))))),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/enums.ts#L6"},"boardzilla-core/src/flow/enums.ts:6")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"eachplayer"},"eachPlayer"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"eachPlayer"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,"Create a loop that iterates over each player. This is the same as ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#foreach"},"forEach")," with the additional behaviour of setting the ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/PlayerCollection#current"},"current player")," on each iteration of the loop."),(0,r.kt)("h4",{id:"type-parameters-8"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")))),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.continueUntil?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"p"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"P"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If specified, rather than loop through each player for a certain number of turns, the loop will continue until the provided condition is true. This function accepts the player for the current loop as its only argument.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.do")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The part that gets repeated. This can contain any number of nested Flow functions. If this value is instead one of ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#repeat"},"Do.repeat"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#break"},"Do.break")," or ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#continue"},"Do.continue"),", or a function that returns one of these, the current loop can be interupted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.name")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current player will be added to the ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},"FlowArguments")," under a key with this name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.nextPlayer?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"p"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"P"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Declare a method to select the next player. If not specified this will follow turn order. See ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/PlayerCollection#sortby"},"PlayerCollection#sortBy")," for more information.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.startingPlayer?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")," ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowArguments")),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Declare the player to start the loop. If not specified, this will be the first player in turn order.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.turns?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If specified, loop through each play this many times. Default is 1.")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"eachPlayer({ name: 'biddingPlayer', do: // each player in turn has a chance to bid\n  playerActions({ actions: [ 'bid', 'pass' ] })\n});\n")),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L197"},"boardzilla-core/src/flow/index.ts:197")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"everyplayer"},"everyPlayer"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"everyPlayer"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,"Create a flow for a set of players that can be done by all players\nsimulataneously in any order. This is similiar to ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#eachplayer"},"eachPlayer")," except\nthat the players can act in any order."),(0,r.kt)("h4",{id:"type-parameters-9"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")))),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.do")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The part that each player can perform. This can contain any number of nested Flow functions. Each player will go through the defined flows individually and may be at difference stages. The flow will complete when all players have completed this flow. If this value is instead one of ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#repeat"},"Do.repeat"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#break"},"Do.break")," or ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#continue"},"Do.continue"),", or a function that returns one of these, the current loop can be interupted, ",(0,r.kt)("em",{parentName:"td"},"regardless of what the other players have done"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.name?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The player acting will be added to the ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},"FlowArguments")," under a key with this name for flows within this ",(0,r.kt)("inlineCode",{parentName:"td"},"do"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.players?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Declare the players to perform this ",(0,r.kt)("inlineCode",{parentName:"td"},"do"),". If not specified, this will be all players.")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"everyPlayer({ name: 'passCardPlayer', do: ( // each player selects a card from hand or passes\n  playerActions({ actions: [ 'selectCard', 'pass' ]}),\n]});\n")),(0,r.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L282"},"boardzilla-core/src/flow/index.ts:282")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"foreach"},"forEach"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"forEach"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Create a loop that iterates over an array. This functions like a standard\n",(0,r.kt)("inlineCode",{parentName:"p"},"Array#forEach")," method."),(0,r.kt)("h4",{id:"type-parameters-10"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement"},(0,r.kt)("inlineCode",{parentName:"a"},"GameElement")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">"," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Serializable"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">","[] ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"[key: string]"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Serializable"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">",";  }")))),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.collection")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowArguments")),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),"[] ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A collection of values to loop over. This can be declared as an array or as a method that accept the ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},"FlowArguments")," used up to this point in the flow and return the collection Array.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.do")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The part that gets repeated. This can contain any number of nested Flow functions. If this value is instead one of ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#repeat"},"Do.repeat"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#break"},"Do.break")," or ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#continue"},"Do.continue"),", or a function that returns one of these, the current loop can be interupted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.name")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current value of collection will be added to the ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},"FlowArguments")," under a key with this name.")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"forEach({ name: 'card', collection: deck.all(Card), do: [\n  // show each card from the deck to player in turn\n  ({ card }) => card.showTo(player),\n  playerActions({ actions: [\n    'chooseCard',\n    'pass',\n  ]}),\n]});\n")),(0,r.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L160"},"boardzilla-core/src/flow/index.ts:160")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"forloop"},"forLoop"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"forLoop"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Create a loop that sets a value and continues until that value meets some\ncondition. This functions like a standard ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop."),(0,r.kt)("h4",{id:"type-parameters-11"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Serializable"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">")))),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.do")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The part that gets repeated. This can contain any number of nested Flow functions. If this value is instead one of ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#repeat"},"Do.repeat"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#break"},"Do.break")," or ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#continue"},"Do.continue"),", or a function that returns one of these, the current loop can be interupted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.initial")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")," ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowArguments")),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The initial value of the loop variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.name")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current value of the loop variable will be added to the ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},"FlowArguments")," under a key with this name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.next")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function that will be run on each loop and must return the new value of the loop variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.while")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A condition function that must return true for the loop to continue. If this evaluates to false when the loop begins, it will be skipped entirely. The condition will be evaluates at the start of each loop to determine whether it should continue.")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"forLoop({\n  name: 'x',\n  initial: 0,\n  next: x => x + 1,\n  while: x => x < 3,\n  do: ({ x }) => {\n    // do something 3 times\n  }\n})\n")),(0,r.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L130"},"boardzilla-core/src/flow/index.ts:130")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"ifelse"},"ifElse"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"ifElse"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,"Provides a branching flow on a condition. This operates like a standard\n",(0,r.kt)("inlineCode",{parentName:"p"},"if... else")),(0,r.kt)("h4",{id:"type-parameters-12"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")))),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.do")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The part that gets run if the condition is true. This can contain any number of nested Flow functions. If this value is instead one of ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#repeat"},"Do.repeat"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#break"},"Do.break")," or ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#continue"},"Do.continue"),", or a function that returns one of these, the current loop can be interupted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.else?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"As ",(0,r.kt)("inlineCode",{parentName:"td"},"do"),", but runs if the condition is false. Optional.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.if")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"r"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.name?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L215"},"boardzilla-core/src/flow/index.ts:215")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"loop"},"loop"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"loop"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"...block"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,"Create a loop that continues until ",(0,r.kt)("a",{parentName:"p",href:"/api/modules#break"},"Do.break")," is called"),(0,r.kt)("h4",{id:"type-parameters-13"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")))),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"...block")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowstep"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowStep")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">","[]")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"loop(playerActions({ actions: [\n  'takeOneFromBag',\n  { name: 'done': do: Do.break }\n]}));\n")),(0,r.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L93"},"boardzilla-core/src/flow/index.ts:93")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"playeractions"},"playerActions"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"playerActions"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,"Stop the flow and wait for a player to act."),(0,r.kt)("h4",{id:"type-parameters-14"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")))),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.actions")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"do?"),": ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"name"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"  })[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"An object of possible actions. Each key is an action name defined in the ",(0,r.kt)("inlineCode",{parentName:"td"},"actions")," of ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#creategame"},"createGame"),". The value is a further flow defintion for the game to run if this action is taken. This can contain any number of nested Flow functions. If no further action is needed, this can be null.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.name?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A unique name for this player action. If provided, this can be used for the UI to determine placement of messages for this action in ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Board#layoutstep"},"Board#layoutStep"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.player?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")," ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"args"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",") => ",(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Which player can perform this action. If not provided, this defaults to the ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/PlayerCollection#current"},"current player"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.players?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P"),"[] ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"args"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",") => ",(0,r.kt)("inlineCode",{parentName:"td"},"P"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.prompt?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"args"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",") => ",(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A prompting message for the player taking the action to decide between their choices.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.skipIf?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'"always"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"never"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"only-one"')),(0,r.kt)("td",{parentName:"tr",align:"left"},"One of 'always', 'never' or 'only-one' (Default 'always'). - only-one: If there is only valid choice in the choices given, the game will skip this choice, prompting the player for subsequent choices, if any, or completing the action otherwise. - always: Rather than present this choice directly, the player will be prompted with choices from the ",(0,r.kt)("em",{parentName:"td"},"next choice")," in each action here, essentially expanding the choices ahead of time to save the player a step. - never: Always present this choice, even if the choice is forced")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L50"},"boardzilla-core/src/flow/index.ts:50")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"switchcase"},"switchCase"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"switchCase"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Provides a branching flow on a condition with multiple outcomes. This\noperates like a standard ",(0,r.kt)("inlineCode",{parentName:"p"},"switch... case")),(0,r.kt)("h4",{id:"type-parameters-15"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement"},(0,r.kt)("inlineCode",{parentName:"a"},"GameElement")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">"," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Serializable"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">","[] ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"[key: string]"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Serializable"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">",";  }")))),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.cases")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SwitchCaseCases"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"An array of conditions that will test whether they meet the conditions based on the evaluated ",(0,r.kt)("inlineCode",{parentName:"td"},"switch")," and execute their ",(0,r.kt)("inlineCode",{parentName:"td"},"do")," block. The case block can contain an ",(0,r.kt)("inlineCode",{parentName:"td"},"eq")," which will test for equality with a provided value, or ",(0,r.kt)("inlineCode",{parentName:"td"},"test")," which will test the value using a provided function that must return a boolean. Only the first one that meets the condition will run. The ",(0,r.kt)("inlineCode",{parentName:"td"},"do")," can contain any number of nested Flow functions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.default?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If no case qualifies, a ",(0,r.kt)("inlineCode",{parentName:"td"},"default")," case can be provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.name?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If a name is provided, the value that results from evaluating ",(0,r.kt)("inlineCode",{parentName:"td"},"switch")," will be added to the ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},"FlowArguments")," under a key with this name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.switch")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")," ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowArguments")),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Expression to evaluate for determining which case should run. This function accepts all ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},"FlowArguments"),".")))),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"switchCase({\n  name: 'switch',\n  switch: () => deck.top(Card)?.suit,\n  cases: [\n    { eq: 'D', do: () => { /* ... diamonds */ },\n    { eq: 'H', do: () => { /* ... hearts */ },\n    { eq: 'S', do: () => { /* ... spades */ },\n    { eq: 'C', do: () => { /* ... clubs */ }\n  ],\n  default: () => { /* ... there is no card */ }\n})\n")),(0,r.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L253"},"boardzilla-core/src/flow/index.ts:253")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"union"},"union"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"union"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"...queries"),"): ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/ElementCollection"},(0,r.kt)("inlineCode",{parentName:"a"},"ElementCollection"))),(0,r.kt)("p",null,"Returns an ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/ElementCollection"},"ElementCollection")," by combining a list of ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/GameElement"},"GameElement"),"'s or ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/ElementCollection"},"ElementCollection"),"'s,"),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"...queries")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement"},(0,r.kt)("inlineCode",{parentName:"a"},"GameElement")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/ElementCollection"},(0,r.kt)("inlineCode",{parentName:"a"},"ElementCollection")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">",")[]")))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/api/classes/ElementCollection"},(0,r.kt)("inlineCode",{parentName:"a"},"ElementCollection"))),(0,r.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/board/utils.ts#L10"},"boardzilla-core/src/board/utils.ts:10")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"whileloop"},"whileLoop"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"whileLoop"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,"Create a loop that continues until some condition is true. This functions\nlike a standard ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loop."),(0,r.kt)("h4",{id:"type-parameters-16"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")))),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.do")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowDefinition")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The part that gets repeated. This can contain any number of nested Flow functions. If this value is instead one of ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#break"},"Do.break"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#break"},"Do.break")," or ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#continue"},"Do.continue"),", or a function that returns one of these, the current loop can be interupted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.while")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#flowarguments"},(0,r.kt)("inlineCode",{parentName:"a"},"FlowArguments")),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Either a simple boolean value or a condition function that must return true for the loop to continue. If this evaluates to false when the loop begins, it will be skipped entirely. The condition will be evaluated at the start of each loop to determine whether it should continue.")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),">"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"whileLoop({ while: () => !bag.isEmpty(), do: (\n  playerActions({ actions: {\n    takeOneFromBag: null,\n  }}),\n)});\n")),(0,r.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/flow/index.ts#L75"},"boardzilla-core/src/flow/index.ts:75")),(0,r.kt)("h2",{id:"ui"},"UI"),(0,r.kt)("h3",{id:"actionlayout"},"ActionLayout"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"ActionLayout"),": ","{"," ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"element"),": ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/GameElement"},(0,r.kt)("inlineCode",{parentName:"a"},"GameElement"))," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"gap?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"height?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"left?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"noAnchor?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"[] ; ",(0,r.kt)("inlineCode",{parentName:"p"},"position?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},'"inset"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"beside"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"stack"')," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"right?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"top?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"width?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"  } & ","{"," ",(0,r.kt)("inlineCode",{parentName:"p"},"position?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},'"inset"'),"  } & ","{"," ",(0,r.kt)("inlineCode",{parentName:"p"},"gap?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"left?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"right?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),"  } ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"p"},"gap?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"left?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"right?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"  } & ","{"," ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"gap?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"top?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"  } ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"gap?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"top?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),"  } ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"gap?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"left?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"position"),": ",(0,r.kt)("inlineCode",{parentName:"p"},'"beside"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"stack"')," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"right?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"top?"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),"  }"),(0,r.kt)("p",null,"Type for layout of player controls"),(0,r.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/board/board.ts#L18"},"boardzilla-core/src/board/board.ts:18")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"box"},"Box"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Box"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"A Box size and position relative to a container"),(0,r.kt)("h4",{id:"type-declaration-2"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"height")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"left")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"top")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"width")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/board/element.ts#L53"},"boardzilla-core/src/board/element.ts:53")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"layoutattributes"},"LayoutAttributes"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"LayoutAttributes"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"List of attributes used to create a new layout in {#link GameElement#layout}."),(0,r.kt)("h4",{id:"type-parameters-17"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement"},(0,r.kt)("inlineCode",{parentName:"a"},"GameElement")))))),(0,r.kt)("h4",{id:"type-declaration-3"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"alignment")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'"top"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"bottom"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"left"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"right"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"top left"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"bottom left"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"top right"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"bottom right"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"center"')),(0,r.kt)("td",{parentName:"tr",align:"left"},"If more room is provided than needed, this determines how the elements will align themselves within the area.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"area?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#box"},(0,r.kt)("inlineCode",{parentName:"a"},"Box"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A box defining the layout's bounds within this element. Unless ",(0,r.kt)("inlineCode",{parentName:"td"},"scaling")," is ",(0,r.kt)("inlineCode",{parentName:"td"},'"none"'),", no elements will ever overflow this area. If unspecified, the entire area is used, i.e. ",(0,r.kt)("inlineCode",{parentName:"td"},"{ left: 0, top: 0, width: 100, height: 100 }"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aspectRatio?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Aspect ratio for each element placed in this layout. This value is a ratio of width over height. Elements will adhere to this ratio unless they have their own specified ",(0,r.kt)("inlineCode",{parentName:"td"},"aspectRatio")," in their ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement#appearance"},"GameElement#appearance"),". This value is ignored if ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," is provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"columns?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"max?"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"min"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),"  } ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"max"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"min?"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),"  }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Columns, as per ",(0,r.kt)("inlineCode",{parentName:"td"},"rows"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"direction")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'"square"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"ltr"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"rtl"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"rtl-btt"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"ltr-btt"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"ttb"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"ttb-rtl"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"btt"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"btt-rtl"')),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the direction in which elements placed here should fill up the rows and columns of the layout. Rows or columns will increase to their specified maximum as needed. Therefore if, for example, ",(0,r.kt)("inlineCode",{parentName:"td"},"direction")," is ",(0,r.kt)("inlineCode",{parentName:"td"},'"ltr"')," and ",(0,r.kt)("inlineCode",{parentName:"td"},"columns")," has no maximum, there will never be a second row added. Values are: - ",(0,r.kt)("em",{parentName:"td"},"square"),": fill rows and columns equally to maintain as square a grid as possible (default) - ",(0,r.kt)("em",{parentName:"td"},"ltr"),": fill columns left to right, then rows top to bottom once maximum columns reached - ",(0,r.kt)("em",{parentName:"td"},"rtl"),": fill columns right to left, then rows top to bottom once maximum columns reached - ",(0,r.kt)("em",{parentName:"td"},"ltr-btt"),": fill columns left to right, then rows bottom to top once maximum columns reached - ",(0,r.kt)("em",{parentName:"td"},"rtl-btt"),": fill columns right to left, then rows bottom to top once maximum columns reached - ",(0,r.kt)("em",{parentName:"td"},"ttb"),": fill rows top to bottom, then columns left to right once maximum rows reached - ",(0,r.kt)("em",{parentName:"td"},"btt"),": fill rows bottom to top, then columns left to right once maximum rows reached - ",(0,r.kt)("em",{parentName:"td"},"ttb-rtl"),": fill rows top to bottom, then columns right to left once maximum rows reached - ",(0,r.kt)("em",{parentName:"td"},"btt-rtl"),": fill rows bottom to top, then columns right to left once maximum rows reached")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"drawer?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"closeDirection"),": ",(0,r.kt)("inlineCode",{parentName:"td"},'"up"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"down"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"left"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"right"')," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"closeIf?"),": (",(0,r.kt)("inlineCode",{parentName:"td"},"actions"),": ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"args"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#argument"},(0,r.kt)("inlineCode",{parentName:"a"},"Argument")),"\\<",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),">",">"," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"name"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"  }[]) => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"closedTab?"),": (",(0,r.kt)("inlineCode",{parentName:"td"},"el"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"openIf?"),": (",(0,r.kt)("inlineCode",{parentName:"td"},"actions"),": ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"args"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#argument"},(0,r.kt)("inlineCode",{parentName:"a"},"Argument")),"\\<",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),">",">"," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"name"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"  }[]) => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"tab"),": (",(0,r.kt)("inlineCode",{parentName:"td"},"el"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"  }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies that this layout should inhabit a drawer, a collapsible area that can be hidden to save overall space on the board.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"drawer.closeDirection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'"up"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"down"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"left"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"right"')),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"drawer.closeIf?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"actions"),": ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"args"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#argument"},(0,r.kt)("inlineCode",{parentName:"a"},"Argument")),"\\<",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),">",">"," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"name"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"  }[]) => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"drawer.closedTab?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"el"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"drawer.openIf?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"actions"),": ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"args"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#argument"},(0,r.kt)("inlineCode",{parentName:"a"},"Argument")),"\\<",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),">",">"," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"name"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"  }[]) => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"drawer.tab")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"el"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"gap?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"x"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"y"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),"  }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If provided, this places a gap between elements. If scaling is 'fill', this is considered a maximum but may shrink or even become negative in order to fill the area. This value is an absolute percentage of the board's size so that gaps specified on different layouts with the same value will exactly match")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"haphazardly?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A number specifying an amount of randomness added to the layout to provide a more natural looking placement")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"limit?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If specified, no more than ",(0,r.kt)("inlineCode",{parentName:"td"},"limit")," items will be visible. This is useful for displaying e.g. decks of cards where showing only 2 or 3 cards provides a deck-like appearance without needed to render more cards underneath that aren't visible.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"margin?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"bottom"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"left"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"right"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"top"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),"  }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Instead of providing ",(0,r.kt)("inlineCode",{parentName:"td"},"area"),", providing a ",(0,r.kt)("inlineCode",{parentName:"td"},"margin")," defines the bounding box in terms of a margin around the edges of this element. This value is an absolute percentage of the board's size so that margins specified on different layouts with the same value will exactly match.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"maxOverlap?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"scaling")," is ",(0,r.kt)("inlineCode",{parentName:"td"},'"fill"'),", this will limit the total amount of overlap if elements are squished together in their space before they will start to shrink to fit. This is useful for e.g. cards that can overlap but that must leave a certain amount visible to clearly identify the card.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"offsetColumn?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#vector"},(0,r.kt)("inlineCode",{parentName:"a"},"Vector"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Instead of ",(0,r.kt)("inlineCode",{parentName:"td"},"gap"),", providing an ",(0,r.kt)("inlineCode",{parentName:"td"},"offsetColumn"),"/",(0,r.kt)("inlineCode",{parentName:"td"},"offsetRow")," specifies that the contained elements must offset one another by a specified amount as a percentage of the elements size, i.e. ",(0,r.kt)("inlineCode",{parentName:"td"},"offsetColumn=100")," is equivalent to a ",(0,r.kt)("inlineCode",{parentName:"td"},"gap")," of 0. This allows non-orthogonal grids like hex or diamond. If one of ",(0,r.kt)("inlineCode",{parentName:"td"},"offsetColumn"),"/",(0,r.kt)("inlineCode",{parentName:"td"},"offsetRow")," is provided but not the other, the unspecified one will be 90\xb0 to the one specified. Like ",(0,r.kt)("inlineCode",{parentName:"td"},"gap"),", if ",(0,r.kt)("inlineCode",{parentName:"td"},"scaling")," is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"fill"),", these offsets may squish to fill space.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"offsetRow?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#vector"},(0,r.kt)("inlineCode",{parentName:"a"},"Vector"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"As ",(0,r.kt)("inlineCode",{parentName:"td"},"offsetColumn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"rows?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"max?"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"min"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),"  } ","|"," ","{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"max"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"min?"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),"  }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The number of rows to allot for placing elements in this layout. If a number is provided, this is fixed. If min/max values are provided, the layout will allot at least ",(0,r.kt)("inlineCode",{parentName:"td"},"min")," and up to ",(0,r.kt)("inlineCode",{parentName:"td"},"max")," as needed. If ",(0,r.kt)("inlineCode",{parentName:"td"},"min")," is omitted, a minimum of 1 is implied. If ",(0,r.kt)("inlineCode",{parentName:"td"},"max")," is omitted, as many are used as needed. Default is ",(0,r.kt)("inlineCode",{parentName:"td"},"{min: 1, max: Infinity}"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"scaling")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'"fit"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"fill"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"none"')),(0,r.kt)("td",{parentName:"tr",align:"left"},"Scaling strategy for the elements placed in this layout. - ",(0,r.kt)("em",{parentName:"td"},"none"),": Elements use the ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," value and do not scale. If no ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," is provided, this behaves like ",(0,r.kt)("inlineCode",{parentName:"td"},"fit")," (default) - ",(0,r.kt)("em",{parentName:"td"},"fit"),": Elements scale up or down to fit within the area alloted without squshing - ",(0,r.kt)("em",{parentName:"td"},"fill"),": Elements scale up or down to completely fill the area, squishing themselves together as needed along one dimension.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"showBoundingBox?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set to true for debugging. Creates a visible box on screen around the defined ",(0,r.kt)("inlineCode",{parentName:"td"},"area"),", tagged with the provided string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"size?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"{"," ",(0,r.kt)("inlineCode",{parentName:"td"},"height"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"width"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),"  }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Size alloted for each element placed in this layout. Unless ",(0,r.kt)("inlineCode",{parentName:"td"},"scaling")," is ",(0,r.kt)("inlineCode",{parentName:"td"},'"none"'),", a ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," provided here will be used only to define an aspect ratio but may scale up or down to fit as needed. As such, when using any ",(0,r.kt)("inlineCode",{parentName:"td"},"scaling")," other than ",(0,r.kt)("inlineCode",{parentName:"td"},'"none"'),", providing an ",(0,r.kt)("inlineCode",{parentName:"td"},"aspectRatio")," instead is sufficient.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"size.height")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"size.width")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"slots?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/api/modules#box"},(0,r.kt)("inlineCode",{parentName:"a"},"Box")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If supplied, this overrides all other attributes to define a set of strictly defined boxes for placing each element. Any elements that exceed the number of slots provided are not displayed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sticky?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set to true to prevent these elements from automatically changing position within the container grid.")))),(0,r.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/board/element.ts#L102"},"boardzilla-core/src/board/element.ts:102")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"vector"},"Vector"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Vector"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"An (x, y) Vector"),(0,r.kt)("h4",{id:"type-declaration-4"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"x")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"y")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/board/element.ts#L58"},"boardzilla-core/src/board/element.ts:58")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"choicesetting"},"choiceSetting"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"choiceSetting"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"label"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"choices"),"): (",(0,r.kt)("inlineCode",{parentName:"p"},"__namedParameters"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"SetupComponentProps"),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("p",null,"Provide a game setting that can be selected from a list of options."),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"label")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Text label to appear next to the option list")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"choices")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"List of choices as key-value pairs, where the value will be the text choice for the host and the key will the result of calling ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Game#setting"},"Game#setting"))))),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn")),(0,r.kt)("p",null,"\u25b8 (",(0,r.kt)("inlineCode",{parentName:"p"},"\xabdestructured\xbb"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("h5",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"\xabdestructured\xbb")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SetupComponentProps"))))),(0,r.kt)("h5",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/ui/setup/components/settingComponents.tsx#L30"},"boardzilla-core/src/ui/setup/components/settingComponents.tsx:30")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"numbersetting"},"numberSetting"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"numberSetting"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"label"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"min"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"max"),"): (",(0,r.kt)("inlineCode",{parentName:"p"},"__namedParameters"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"SetupComponentProps"),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("p",null,"Provide a game setting that can be selected as a number."),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"label")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Text label to appear next to the number select")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"min")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The minimum number allowed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"max")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The maximum number allowed")))),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn")),(0,r.kt)("p",null,"\u25b8 (",(0,r.kt)("inlineCode",{parentName:"p"},"\xabdestructured\xbb"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("h5",{id:"parameters-14"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"\xabdestructured\xbb")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SetupComponentProps"))))),(0,r.kt)("h5",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("h4",{id:"defined-in-25"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/ui/setup/components/settingComponents.tsx#L65"},"boardzilla-core/src/ui/setup/components/settingComponents.tsx:65")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"render"},"render"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"render"),"\\<",(0,r.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"The core function called to customize the game's UI."),(0,r.kt)("h4",{id:"type-parameters-18"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"P")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Player"},(0,r.kt)("inlineCode",{parentName:"a"},"Player")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"B")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Board"},(0,r.kt)("inlineCode",{parentName:"a"},"Board")),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"any"),">")))),(0,r.kt)("h4",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"setup")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SetupFunction"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.boardSizes?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"screenX"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"screenY"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"mobile"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"BoardSize")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function that determines what board size to use based on the player's device and viewport. The function will take the following arguments: - screenX: The player's view port width - screenY: The player's view port height - mobile: true if using a mobile device The function should return a string indicating the layout to use, this will be cached and sent to the ",(0,r.kt)("inlineCode",{parentName:"td"},"layout")," function.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.layout?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"board"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"B"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"player"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"P"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"boardSize"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function for declaring all UI customization in the game. Typically this will include calls to ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement#layout"},"GameElement#layout"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/GameElement#appearance"},"GameElement#appearance"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Board#layoutstep"},"Board#layoutStep")," and ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Board#layoutaction"},"Board#layoutAction"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.settings?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"\\<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", (",(0,r.kt)("inlineCode",{parentName:"td"},"p"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"SetupComponentProps"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Element"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Define your game's settings that the host can customize. This is an object consisting of custom settings. The key is a name for this setting that can be used in ",(0,r.kt)("a",{parentName:"td",href:"/api/classes/Game#setting"},"Game#setting")," to retrieve the setting's value for this game. The object is the result of calling one of the setting functions ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#togglesetting"},"toggleSetting"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#numbersetting"},"numberSetting"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#textsetting"},"textSetting")," or ",(0,r.kt)("a",{parentName:"td",href:"/api/modules#choicesetting"},"choiceSetting"),".")))),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-26"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/ui/index.tsx#L608"},"boardzilla-core/src/ui/index.tsx:608")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"textsetting"},"textSetting"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"textSetting"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"label"),"): (",(0,r.kt)("inlineCode",{parentName:"p"},"__namedParameters"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"SetupComponentProps"),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("p",null,"Provide a game setting that can be entered as text."),(0,r.kt)("h4",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"label")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Text label to appear next to the text box")))),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn")),(0,r.kt)("p",null,"\u25b8 (",(0,r.kt)("inlineCode",{parentName:"p"},"\xabdestructured\xbb"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("h5",{id:"parameters-17"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"\xabdestructured\xbb")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SetupComponentProps"))))),(0,r.kt)("h5",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("h4",{id:"defined-in-27"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/ui/setup/components/settingComponents.tsx#L51"},"boardzilla-core/src/ui/setup/components/settingComponents.tsx:51")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"togglesetting"},"toggleSetting"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"toggleSetting"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"label"),"): (",(0,r.kt)("inlineCode",{parentName:"p"},"__namedParameters"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"SetupComponentProps"),") => ",(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("p",null,"Provide a game setting that can be turned on or off."),(0,r.kt)("h4",{id:"parameters-18"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"label")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Text label to appear next to the toggle")))),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn")),(0,r.kt)("p",null,"\u25b8 (",(0,r.kt)("inlineCode",{parentName:"p"},"\xabdestructured\xbb"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("h5",{id:"parameters-19"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"\xabdestructured\xbb")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SetupComponentProps"))))),(0,r.kt)("h5",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Element")),(0,r.kt)("h4",{id:"defined-in-28"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/boardzilla/boardzilla-core/blob/41757ea/src/ui/setup/components/settingComponents.tsx#L9"},"boardzilla-core/src/ui/setup/components/settingComponents.tsx:9")))}s.isMDXComponent=!0}}]);