"use strict";(self.webpackChunkboardzilla_docs=self.webpackChunkboardzilla_docs||[]).push([[9083],{8415:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var t=a(5893),o=a(1151);const s={sidebar_position:1},r="Core concepts",i={id:"game/core-concepts",title:"Core concepts",description:"These are some of the basic core concepts of Boardzilla that will be refered to",source:"@site/docs/game/core-concepts.md",sourceDirName:"game",slug:"/game/core-concepts",permalink:"/game/core-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/boardzilla/boardzilla-docs/tree/main/docs/game/core-concepts.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Building a game",permalink:"/category/building-a-game"},next:{title:"Creating a game",permalink:"/game/creating-a-game"}},c={},l=[{value:"Board",id:"board",level:2},{value:"Space",id:"space",level:3},{value:"Piece",id:"piece",level:3},{value:"Player",id:"player",level:2},{value:"Action",id:"action",level:2},{value:"Flow",id:"flow",level:2},{value:"UI",id:"ui",level:2},{value:"Layout",id:"layout",level:3},{value:"Appearance",id:"appearance",level:3},{value:"Controls",id:"controls",level:3}];function d(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"core-concepts",children:"Core concepts"}),"\n",(0,t.jsx)(n.p,{children:"These are some of the basic core concepts of Boardzilla that will be refered to\nthroughout the documentation."}),"\n",(0,t.jsx)(n.h2,{id:"board",children:"Board"}),"\n",(0,t.jsxs)(n.p,{children:["The Board is the class that defines the overall layout of the game. It is\ncomposed of ",(0,t.jsx)(n.strong,{children:"Spaces"})," and ",(0,t.jsx)(n.strong,{children:"Pieces"}),". It itself is a Space but with special\nbehaviour."]}),"\n",(0,t.jsx)(n.h3,{id:"space",children:"Space"}),"\n",(0,t.jsxs)(n.p,{children:["Spaces are regions of the Board. They are ",(0,t.jsx)(n.strong,{children:"stable"})," and never change once the\ngame starts. They can be nested within each other."]}),"\n",(0,t.jsx)(n.h3,{id:"piece",children:"Piece"}),"\n",(0,t.jsxs)(n.p,{children:["Pieces are ",(0,t.jsx)(n.strong,{children:"movable"})," objects in the game. They can freely move around to spaces,\nand can also be placed inside other Pieces, such as when tokens are placed onto\na card."]}),"\n",(0,t.jsxs)(n.p,{children:["Learn more in ",(0,t.jsx)(n.a,{href:"./board",children:"Board Structure"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"player",children:"Player"}),"\n",(0,t.jsx)(n.p,{children:'The player is a core class that represents a user playing the game. Each game\nwill have a player class. Players can have pieces and spaces assigned to them,\nand any piece that enters these becomes "owned" by the player.'}),"\n",(0,t.jsx)(n.h2,{id:"action",children:"Action"}),"\n",(0,t.jsxs)(n.p,{children:["An Action is a discrete unit of choice for a player. An action has a ",(0,t.jsx)(n.strong,{children:"name"}),",\nany possible ",(0,t.jsx)(n.strong,{children:"selections"})," for the action, and ",(0,t.jsx)(n.strong,{children:"behaviour"}),". In chess an\naction might be called \"move\". It has two choices: the piece being moved, and\nspace it's moved to. It's behaviour would be to move the piece to its\ndestination and a message to the game log."]}),"\n",(0,t.jsxs)(n.p,{children:["Learn more in ",(0,t.jsx)(n.a,{href:"./actions",children:"Actions"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"flow",children:"Flow"}),"\n",(0,t.jsx)(n.p,{children:"The Flow of your game is how the game runs from beginning to end. This describes\nthe phases, rounds and turns of the game, and what actions are avaiable to\nplayers at which point in the Flow."}),"\n",(0,t.jsxs)(n.p,{children:["Learn more in ",(0,t.jsx)(n.a,{href:"./flow",children:"Flow"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"ui",children:"UI"}),"\n",(0,t.jsx)(n.p,{children:"Boardzilla renders and animated the board on the player's browser according to\nthe rules of your game. By default everything appears in a very raw but usable\nformat. You can gradually customize how your game appears."}),"\n",(0,t.jsx)(n.h3,{id:"layout",children:"Layout"}),"\n",(0,t.jsx)(n.p,{children:"The layout of the game is the definition of where the Spaces and Pieces appear\nin the player's browser, and how they change as Pieces are added into an area\nand start to fill it up."}),"\n",(0,t.jsx)(n.h3,{id:"appearance",children:"Appearance"}),"\n",(0,t.jsx)(n.p,{children:"The appearance of each visible space and piece can be customized using JSX that\nyou provide and you can apply your own CSS to these. You can also supply special\neffects that will be applied when things happen to these elements."}),"\n",(0,t.jsx)(n.h3,{id:"controls",children:"Controls"}),"\n",(0,t.jsx)(n.p,{children:"Controls are what we call any floating boxes above the game board. These include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Prompts"}),"\n",(0,t.jsx)(n.li,{children:"Button choices"}),"\n",(0,t.jsx)(n.li,{children:"Inputs for text or numbers"}),"\n",(0,t.jsx)(n.li,{children:"Confirmation text and buttons"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>r});var t=a(7294);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);